//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Sun Jul 29 16:55:40 EDT 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_server_reset_request_put   O     1 reg
// RDY_server_reset_response_get  O     1 reg
// RDY_set_addr_map               O     1
// slave_awready                  O     1 reg
// slave_wready                   O     1 reg
// slave_bvalid                   O     1 reg
// slave_bresp                    O     2 reg
// slave_arready                  O     1 reg
// slave_rvalid                   O     1 reg
// slave_rresp                    O     2 reg
// slave_rdata                    O    64 reg
// to_raw_mem_request_get         O   353
// RDY_to_raw_mem_request_get     O     1
// RDY_to_raw_mem_response_put    O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// set_addr_map_addr_base         I    64 reg
// set_addr_map_addr_lim          I    64 reg
// slave_awvalid                  I     1
// slave_awaddr                   I    64 reg
// slave_awprot                   I     3 reg
// slave_wvalid                   I     1
// slave_wdata                    I    64 reg
// slave_wstrb                    I     8 reg
// slave_bready                   I     1
// slave_arvalid                  I     1
// slave_araddr                   I    64 reg
// slave_arprot                   I     3 reg
// slave_rready                   I     1
// to_raw_mem_response_put        I   256
// EN_server_reset_request_put    I     1
// EN_server_reset_response_get   I     1
// EN_set_addr_map                I     1
// EN_to_raw_mem_response_put     I     1
// EN_to_raw_mem_request_get      I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkMem_Controller(CLK,
			RST_N,

			EN_server_reset_request_put,
			RDY_server_reset_request_put,

			EN_server_reset_response_get,
			RDY_server_reset_response_get,

			set_addr_map_addr_base,
			set_addr_map_addr_lim,
			EN_set_addr_map,
			RDY_set_addr_map,

			slave_awvalid,
			slave_awaddr,
			slave_awprot,

			slave_awready,

			slave_wvalid,
			slave_wdata,
			slave_wstrb,

			slave_wready,

			slave_bvalid,

			slave_bresp,

			slave_bready,

			slave_arvalid,
			slave_araddr,
			slave_arprot,

			slave_arready,

			slave_rvalid,

			slave_rresp,

			slave_rdata,

			slave_rready,

			EN_to_raw_mem_request_get,
			to_raw_mem_request_get,
			RDY_to_raw_mem_request_get,

			to_raw_mem_response_put,
			EN_to_raw_mem_response_put,
			RDY_to_raw_mem_response_put);
  input  CLK;
  input  RST_N;

  // action method server_reset_request_put
  input  EN_server_reset_request_put;
  output RDY_server_reset_request_put;

  // action method server_reset_response_get
  input  EN_server_reset_response_get;
  output RDY_server_reset_response_get;

  // action method set_addr_map
  input  [63 : 0] set_addr_map_addr_base;
  input  [63 : 0] set_addr_map_addr_lim;
  input  EN_set_addr_map;
  output RDY_set_addr_map;

  // action method slave_m_awvalid
  input  slave_awvalid;
  input  [63 : 0] slave_awaddr;
  input  [2 : 0] slave_awprot;

  // value method slave_m_awready
  output slave_awready;

  // action method slave_m_wvalid
  input  slave_wvalid;
  input  [63 : 0] slave_wdata;
  input  [7 : 0] slave_wstrb;

  // value method slave_m_wready
  output slave_wready;

  // value method slave_m_bvalid
  output slave_bvalid;

  // value method slave_m_bresp
  output [1 : 0] slave_bresp;

  // value method slave_m_buser

  // action method slave_m_bready
  input  slave_bready;

  // action method slave_m_arvalid
  input  slave_arvalid;
  input  [63 : 0] slave_araddr;
  input  [2 : 0] slave_arprot;

  // value method slave_m_arready
  output slave_arready;

  // value method slave_m_rvalid
  output slave_rvalid;

  // value method slave_m_rresp
  output [1 : 0] slave_rresp;

  // value method slave_m_rdata
  output [63 : 0] slave_rdata;

  // value method slave_m_ruser

  // action method slave_m_rready
  input  slave_rready;

  // actionvalue method to_raw_mem_request_get
  input  EN_to_raw_mem_request_get;
  output [352 : 0] to_raw_mem_request_get;
  output RDY_to_raw_mem_request_get;

  // action method to_raw_mem_response_put
  input  [255 : 0] to_raw_mem_response_put;
  input  EN_to_raw_mem_response_put;
  output RDY_to_raw_mem_response_put;

  // signals for module outputs
  wire [352 : 0] to_raw_mem_request_get;
  wire [63 : 0] slave_rdata;
  wire [1 : 0] slave_bresp, slave_rresp;
  wire RDY_server_reset_request_put,
       RDY_server_reset_response_get,
       RDY_set_addr_map,
       RDY_to_raw_mem_request_get,
       RDY_to_raw_mem_response_put,
       slave_arready,
       slave_awready,
       slave_bvalid,
       slave_rvalid,
       slave_wready;

  // inlined wires
  reg [353 : 0] f_raw_mem_reqs_rv$port1__write_1;
  wire [353 : 0] f_raw_mem_reqs_rv$port1__read,
		 f_raw_mem_reqs_rv$port2__read,
		 f_raw_mem_reqs_rv$port3__read;
  wire [256 : 0] f_raw_mem_rsps_rv$port1__read,
		 f_raw_mem_rsps_rv$port1__write_1,
		 f_raw_mem_rsps_rv$port2__read,
		 f_raw_mem_rsps_rv$port3__read;
  wire [140 : 0] f_reqs_rv$port1__read,
		 f_reqs_rv$port1__write_1,
		 f_reqs_rv$port2__read;
  wire f_raw_mem_reqs_rv$EN_port1__write,
       f_reqs_rv$EN_port0__write,
       f_reqs_rv$EN_port1__write;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register f_raw_mem_reqs_rv
  reg [353 : 0] f_raw_mem_reqs_rv;
  wire [353 : 0] f_raw_mem_reqs_rv$D_IN;
  wire f_raw_mem_reqs_rv$EN;

  // register f_raw_mem_rsps_rv
  reg [256 : 0] f_raw_mem_rsps_rv;
  wire [256 : 0] f_raw_mem_rsps_rv$D_IN;
  wire f_raw_mem_rsps_rv$EN;

  // register f_reqs_rv
  reg [140 : 0] f_reqs_rv;
  wire [140 : 0] f_reqs_rv$D_IN;
  wire f_reqs_rv$EN;

  // register rg_addr_base
  reg [63 : 0] rg_addr_base;
  wire [63 : 0] rg_addr_base$D_IN;
  wire rg_addr_base$EN;

  // register rg_addr_lim
  reg [63 : 0] rg_addr_lim;
  wire [63 : 0] rg_addr_lim$D_IN;
  wire rg_addr_lim$EN;

  // register rg_cached_clean
  reg rg_cached_clean;
  wire rg_cached_clean$D_IN, rg_cached_clean$EN;

  // register rg_cached_raw_mem_addr
  reg [63 : 0] rg_cached_raw_mem_addr;
  wire [63 : 0] rg_cached_raw_mem_addr$D_IN;
  wire rg_cached_raw_mem_addr$EN;

  // register rg_cached_raw_mem_word
  reg [255 : 0] rg_cached_raw_mem_word;
  wire [255 : 0] rg_cached_raw_mem_word$D_IN;
  wire rg_cached_raw_mem_word$EN;

  // register rg_state
  reg [1 : 0] rg_state;
  reg [1 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule slave_xactor_f_rd_addr
  wire [66 : 0] slave_xactor_f_rd_addr$D_IN, slave_xactor_f_rd_addr$D_OUT;
  wire slave_xactor_f_rd_addr$CLR,
       slave_xactor_f_rd_addr$DEQ,
       slave_xactor_f_rd_addr$EMPTY_N,
       slave_xactor_f_rd_addr$ENQ,
       slave_xactor_f_rd_addr$FULL_N;

  // ports of submodule slave_xactor_f_rd_data
  wire [65 : 0] slave_xactor_f_rd_data$D_IN, slave_xactor_f_rd_data$D_OUT;
  wire slave_xactor_f_rd_data$CLR,
       slave_xactor_f_rd_data$DEQ,
       slave_xactor_f_rd_data$EMPTY_N,
       slave_xactor_f_rd_data$ENQ,
       slave_xactor_f_rd_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_addr
  wire [66 : 0] slave_xactor_f_wr_addr$D_IN, slave_xactor_f_wr_addr$D_OUT;
  wire slave_xactor_f_wr_addr$CLR,
       slave_xactor_f_wr_addr$DEQ,
       slave_xactor_f_wr_addr$EMPTY_N,
       slave_xactor_f_wr_addr$ENQ,
       slave_xactor_f_wr_addr$FULL_N;

  // ports of submodule slave_xactor_f_wr_data
  wire [71 : 0] slave_xactor_f_wr_data$D_IN, slave_xactor_f_wr_data$D_OUT;
  wire slave_xactor_f_wr_data$CLR,
       slave_xactor_f_wr_data$DEQ,
       slave_xactor_f_wr_data$EMPTY_N,
       slave_xactor_f_wr_data$ENQ,
       slave_xactor_f_wr_data$FULL_N;

  // ports of submodule slave_xactor_f_wr_resp
  wire [1 : 0] slave_xactor_f_wr_resp$D_IN, slave_xactor_f_wr_resp$D_OUT;
  wire slave_xactor_f_wr_resp$CLR,
       slave_xactor_f_wr_resp$DEQ,
       slave_xactor_f_wr_resp$EMPTY_N,
       slave_xactor_f_wr_resp$ENQ,
       slave_xactor_f_wr_resp$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_external_reset,
       CAN_FIRE_RL_rl_invalid_rd_address,
       CAN_FIRE_RL_rl_invalid_wr_address,
       CAN_FIRE_RL_rl_merge_rd_req,
       CAN_FIRE_RL_rl_merge_wr_req,
       CAN_FIRE_RL_rl_miss_clean_req,
       CAN_FIRE_RL_rl_power_on_reset,
       CAN_FIRE_RL_rl_process_rd_req,
       CAN_FIRE_RL_rl_process_wr_req,
       CAN_FIRE_RL_rl_reload,
       CAN_FIRE_RL_rl_reset_reload_cache,
       CAN_FIRE_RL_rl_writeback_dirty,
       CAN_FIRE_RL_rl_writeback_dirty_idle,
       CAN_FIRE_server_reset_request_put,
       CAN_FIRE_server_reset_response_get,
       CAN_FIRE_set_addr_map,
       CAN_FIRE_slave_m_arvalid,
       CAN_FIRE_slave_m_awvalid,
       CAN_FIRE_slave_m_bready,
       CAN_FIRE_slave_m_rready,
       CAN_FIRE_slave_m_wvalid,
       CAN_FIRE_to_raw_mem_request_get,
       CAN_FIRE_to_raw_mem_response_put,
       WILL_FIRE_RL_rl_external_reset,
       WILL_FIRE_RL_rl_invalid_rd_address,
       WILL_FIRE_RL_rl_invalid_wr_address,
       WILL_FIRE_RL_rl_merge_rd_req,
       WILL_FIRE_RL_rl_merge_wr_req,
       WILL_FIRE_RL_rl_miss_clean_req,
       WILL_FIRE_RL_rl_power_on_reset,
       WILL_FIRE_RL_rl_process_rd_req,
       WILL_FIRE_RL_rl_process_wr_req,
       WILL_FIRE_RL_rl_reload,
       WILL_FIRE_RL_rl_reset_reload_cache,
       WILL_FIRE_RL_rl_writeback_dirty,
       WILL_FIRE_RL_rl_writeback_dirty_idle,
       WILL_FIRE_server_reset_request_put,
       WILL_FIRE_server_reset_response_get,
       WILL_FIRE_set_addr_map,
       WILL_FIRE_slave_m_arvalid,
       WILL_FIRE_slave_m_awvalid,
       WILL_FIRE_slave_m_bready,
       WILL_FIRE_slave_m_rready,
       WILL_FIRE_slave_m_wvalid,
       WILL_FIRE_to_raw_mem_request_get,
       WILL_FIRE_to_raw_mem_response_put;

  // inputs to muxes for submodule ports
  wire [353 : 0] MUX_f_raw_mem_reqs_rv$port1__write_1__VAL_1,
		 MUX_f_raw_mem_reqs_rv$port1__write_1__VAL_3;
  wire [255 : 0] MUX_rg_cached_raw_mem_word$write_1__VAL_1;
  wire [140 : 0] MUX_f_reqs_rv$port1__write_1__VAL_1,
		 MUX_f_reqs_rv$port1__write_1__VAL_2;
  wire [65 : 0] MUX_slave_xactor_f_rd_data$enq_1__VAL_1,
		MUX_slave_xactor_f_rd_data$enq_1__VAL_2;
  wire MUX_f_raw_mem_reqs_rv$port1__write_1__SEL_1,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_2;

  // remaining internal signals
  reg [63 : 0] word64_old__h6965;
  reg [31 : 0] v__h1632,
	       v__h1638,
	       v__h1954,
	       v__h1960,
	       v__h2392,
	       v__h2398,
	       v__h2634,
	       v__h2640,
	       v__h2877,
	       v__h2883,
	       v__h3128,
	       v__h3134,
	       v__h3369,
	       v__h3375,
	       v__h3592,
	       v__h3598,
	       v__h3855,
	       v__h3861,
	       v__h6778,
	       v__h6784,
	       v__h8718,
	       v__h8724,
	       v__h8912,
	       v__h8918,
	       v__h9193,
	       v__h9199,
	       v__h9551,
	       v__h9557,
	       v__h9946,
	       v__h9952;
  reg TASK_testplusargs___d217;
  wire [223 : 0] IF_n2989_BIT_2_THEN_IF_n2989_BIT_1_THEN_IF_n29_ETC__q2;
  wire [63 : 0] exit_value__h8954,
		f_reqs_rv_BITS_138_TO_75_MINUS_rg_addr_base__q1,
		mask__h6970,
		rdata__h3993,
		req_raw_mem_addr__h2965,
		updated_word64__h6971,
		x__h7344,
		y__h7345,
		y__h7346;
  wire [15 : 0] n2__h3988, n2__h3989;
  wire [7 : 0] SEXT_f_reqs_rv_port0__read__2_BIT_64_95___d196,
	       SEXT_f_reqs_rv_port0__read__2_BIT_65_92___d193,
	       SEXT_f_reqs_rv_port0__read__2_BIT_66_88___d189,
	       SEXT_f_reqs_rv_port0__read__2_BIT_67_85___d186,
	       SEXT_f_reqs_rv_port0__read__2_BIT_68_81___d182,
	       SEXT_f_reqs_rv_port0__read__2_BIT_69_78___d179,
	       SEXT_f_reqs_rv_port0__read__2_BIT_70_74___d175,
	       SEXT_f_reqs_rv_port0__read__2_BIT_71_71___d172;
  wire NOT_cfg_verbosity_read_ULE_1___d5,
       NOT_cfg_verbosity_read_ULE_2_2___d33,
       f_reqs_rv_port0__read__2_BITS_138_TO_75_9_ULT__ETC___d72,
       rg_addr_base_8_ULE_f_reqs_rv_port0__read__2_BI_ETC___d70,
       rg_cached_raw_mem_addr_0_EQ_0_CONCAT_f_reqs_rv_ETC___d79,
       rg_state_EQ_3_3_AND_NOT_f_reqs_rv_port0__read__ETC___d238,
       rg_state_EQ_3_3_AND_f_reqs_rv_port0__read__2_B_ETC___d75;

  // action method server_reset_request_put
  assign RDY_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_server_reset_request_put = EN_server_reset_request_put ;

  // action method server_reset_response_get
  assign RDY_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_server_reset_response_get = EN_server_reset_response_get ;

  // action method set_addr_map
  assign RDY_set_addr_map = rg_state == 2'd3 ;
  assign CAN_FIRE_set_addr_map = rg_state == 2'd3 ;
  assign WILL_FIRE_set_addr_map = EN_set_addr_map ;

  // action method slave_m_awvalid
  assign CAN_FIRE_slave_m_awvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_awvalid = 1'd1 ;

  // value method slave_m_awready
  assign slave_awready = slave_xactor_f_wr_addr$FULL_N ;

  // action method slave_m_wvalid
  assign CAN_FIRE_slave_m_wvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_wvalid = 1'd1 ;

  // value method slave_m_wready
  assign slave_wready = slave_xactor_f_wr_data$FULL_N ;

  // value method slave_m_bvalid
  assign slave_bvalid = slave_xactor_f_wr_resp$EMPTY_N ;

  // value method slave_m_bresp
  assign slave_bresp = slave_xactor_f_wr_resp$D_OUT ;

  // action method slave_m_bready
  assign CAN_FIRE_slave_m_bready = 1'd1 ;
  assign WILL_FIRE_slave_m_bready = 1'd1 ;

  // action method slave_m_arvalid
  assign CAN_FIRE_slave_m_arvalid = 1'd1 ;
  assign WILL_FIRE_slave_m_arvalid = 1'd1 ;

  // value method slave_m_arready
  assign slave_arready = slave_xactor_f_rd_addr$FULL_N ;

  // value method slave_m_rvalid
  assign slave_rvalid = slave_xactor_f_rd_data$EMPTY_N ;

  // value method slave_m_rresp
  assign slave_rresp = slave_xactor_f_rd_data$D_OUT[65:64] ;

  // value method slave_m_rdata
  assign slave_rdata = slave_xactor_f_rd_data$D_OUT[63:0] ;

  // action method slave_m_rready
  assign CAN_FIRE_slave_m_rready = 1'd1 ;
  assign WILL_FIRE_slave_m_rready = 1'd1 ;

  // actionvalue method to_raw_mem_request_get
  assign to_raw_mem_request_get = f_raw_mem_reqs_rv[352:0] ;
  assign RDY_to_raw_mem_request_get = f_raw_mem_reqs_rv[353] ;
  assign CAN_FIRE_to_raw_mem_request_get = f_raw_mem_reqs_rv[353] ;
  assign WILL_FIRE_to_raw_mem_request_get = EN_to_raw_mem_request_get ;

  // action method to_raw_mem_response_put
  assign RDY_to_raw_mem_response_put = !f_raw_mem_rsps_rv$port1__read[256] ;
  assign CAN_FIRE_to_raw_mem_response_put =
	     !f_raw_mem_rsps_rv$port1__read[256] ;
  assign WILL_FIRE_to_raw_mem_response_put = EN_to_raw_mem_response_put ;

  // submodule f_reset_reqs
  FIFO20 #(.guarded(32'd1)) f_reset_reqs(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_reqs$ENQ),
					 .DEQ(f_reset_reqs$DEQ),
					 .CLR(f_reset_reqs$CLR),
					 .FULL_N(f_reset_reqs$FULL_N),
					 .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO20 #(.guarded(32'd1)) f_reset_rsps(.RST(RST_N),
					 .CLK(CLK),
					 .ENQ(f_reset_rsps$ENQ),
					 .DEQ(f_reset_rsps$DEQ),
					 .CLR(f_reset_rsps$CLR),
					 .FULL_N(f_reset_rsps$FULL_N),
					 .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule slave_xactor_f_rd_addr
  FIFO2 #(.width(32'd67), .guarded(32'd1)) slave_xactor_f_rd_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_rd_addr$D_IN),
								  .ENQ(slave_xactor_f_rd_addr$ENQ),
								  .DEQ(slave_xactor_f_rd_addr$DEQ),
								  .CLR(slave_xactor_f_rd_addr$CLR),
								  .D_OUT(slave_xactor_f_rd_addr$D_OUT),
								  .FULL_N(slave_xactor_f_rd_addr$FULL_N),
								  .EMPTY_N(slave_xactor_f_rd_addr$EMPTY_N));

  // submodule slave_xactor_f_rd_data
  FIFO2 #(.width(32'd66), .guarded(32'd1)) slave_xactor_f_rd_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_rd_data$D_IN),
								  .ENQ(slave_xactor_f_rd_data$ENQ),
								  .DEQ(slave_xactor_f_rd_data$DEQ),
								  .CLR(slave_xactor_f_rd_data$CLR),
								  .D_OUT(slave_xactor_f_rd_data$D_OUT),
								  .FULL_N(slave_xactor_f_rd_data$FULL_N),
								  .EMPTY_N(slave_xactor_f_rd_data$EMPTY_N));

  // submodule slave_xactor_f_wr_addr
  FIFO2 #(.width(32'd67), .guarded(32'd1)) slave_xactor_f_wr_addr(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_wr_addr$D_IN),
								  .ENQ(slave_xactor_f_wr_addr$ENQ),
								  .DEQ(slave_xactor_f_wr_addr$DEQ),
								  .CLR(slave_xactor_f_wr_addr$CLR),
								  .D_OUT(slave_xactor_f_wr_addr$D_OUT),
								  .FULL_N(slave_xactor_f_wr_addr$FULL_N),
								  .EMPTY_N(slave_xactor_f_wr_addr$EMPTY_N));

  // submodule slave_xactor_f_wr_data
  FIFO2 #(.width(32'd72), .guarded(32'd1)) slave_xactor_f_wr_data(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(slave_xactor_f_wr_data$D_IN),
								  .ENQ(slave_xactor_f_wr_data$ENQ),
								  .DEQ(slave_xactor_f_wr_data$DEQ),
								  .CLR(slave_xactor_f_wr_data$CLR),
								  .D_OUT(slave_xactor_f_wr_data$D_OUT),
								  .FULL_N(slave_xactor_f_wr_data$FULL_N),
								  .EMPTY_N(slave_xactor_f_wr_data$EMPTY_N));

  // submodule slave_xactor_f_wr_resp
  FIFO2 #(.width(32'd2), .guarded(32'd1)) slave_xactor_f_wr_resp(.RST(RST_N),
								 .CLK(CLK),
								 .D_IN(slave_xactor_f_wr_resp$D_IN),
								 .ENQ(slave_xactor_f_wr_resp$ENQ),
								 .DEQ(slave_xactor_f_wr_resp$DEQ),
								 .CLR(slave_xactor_f_wr_resp$CLR),
								 .D_OUT(slave_xactor_f_wr_resp$D_OUT),
								 .FULL_N(slave_xactor_f_wr_resp$FULL_N),
								 .EMPTY_N(slave_xactor_f_wr_resp$EMPTY_N));

  // rule RL_rl_reset_reload_cache
  assign CAN_FIRE_RL_rl_reset_reload_cache =
	     !f_raw_mem_reqs_rv$port1__read[353] && rg_state == 2'd1 ;
  assign WILL_FIRE_RL_rl_reset_reload_cache =
	     CAN_FIRE_RL_rl_reset_reload_cache ;

  // rule RL_rl_writeback_dirty_idle
  assign CAN_FIRE_RL_rl_writeback_dirty_idle =
	     !f_raw_mem_reqs_rv$port1__read[353] && rg_state == 2'd3 &&
	     !f_reqs_rv[140] &&
	     !rg_cached_clean ;
  assign WILL_FIRE_RL_rl_writeback_dirty_idle =
	     CAN_FIRE_RL_rl_writeback_dirty_idle ;

  // rule RL_rl_writeback_dirty
  assign CAN_FIRE_RL_rl_writeback_dirty =
	     !f_raw_mem_reqs_rv$port1__read[353] && f_reqs_rv[140] &&
	     rg_state_EQ_3_3_AND_f_reqs_rv_port0__read__2_B_ETC___d75 &&
	     !rg_cached_raw_mem_addr_0_EQ_0_CONCAT_f_reqs_rv_ETC___d79 &&
	     !rg_cached_clean ;
  assign WILL_FIRE_RL_rl_writeback_dirty = CAN_FIRE_RL_rl_writeback_dirty ;

  // rule RL_rl_miss_clean_req
  assign CAN_FIRE_RL_rl_miss_clean_req =
	     f_reqs_rv[140] && !f_raw_mem_reqs_rv$port1__read[353] &&
	     rg_state_EQ_3_3_AND_f_reqs_rv_port0__read__2_B_ETC___d75 &&
	     !rg_cached_raw_mem_addr_0_EQ_0_CONCAT_f_reqs_rv_ETC___d79 &&
	     rg_cached_clean ;
  assign WILL_FIRE_RL_rl_miss_clean_req =
	     CAN_FIRE_RL_rl_miss_clean_req &&
	     !WILL_FIRE_RL_rl_external_reset &&
	     !EN_set_addr_map ;

  // rule RL_rl_reload
  assign CAN_FIRE_RL_rl_reload = f_raw_mem_rsps_rv[256] && rg_state == 2'd2 ;
  assign WILL_FIRE_RL_rl_reload = CAN_FIRE_RL_rl_reload ;

  // rule RL_rl_process_rd_req
  assign CAN_FIRE_RL_rl_process_rd_req =
	     f_reqs_rv[140] && slave_xactor_f_rd_data$FULL_N &&
	     rg_state_EQ_3_3_AND_f_reqs_rv_port0__read__2_B_ETC___d75 &&
	     rg_cached_raw_mem_addr_0_EQ_0_CONCAT_f_reqs_rv_ETC___d79 &&
	     !f_reqs_rv[139] ;
  assign WILL_FIRE_RL_rl_process_rd_req = CAN_FIRE_RL_rl_process_rd_req ;

  // rule RL_rl_process_wr_req
  assign CAN_FIRE_RL_rl_process_wr_req =
	     f_reqs_rv[140] && slave_xactor_f_wr_resp$FULL_N &&
	     rg_state_EQ_3_3_AND_f_reqs_rv_port0__read__2_B_ETC___d75 &&
	     rg_cached_raw_mem_addr_0_EQ_0_CONCAT_f_reqs_rv_ETC___d79 &&
	     f_reqs_rv[139] ;
  assign WILL_FIRE_RL_rl_process_wr_req = CAN_FIRE_RL_rl_process_wr_req ;

  // rule RL_rl_invalid_rd_address
  assign CAN_FIRE_RL_rl_invalid_rd_address =
	     f_reqs_rv[140] && slave_xactor_f_rd_data$FULL_N &&
	     rg_state_EQ_3_3_AND_NOT_f_reqs_rv_port0__read__ETC___d238 &&
	     !f_reqs_rv[139] ;
  assign WILL_FIRE_RL_rl_invalid_rd_address =
	     CAN_FIRE_RL_rl_invalid_rd_address ;

  // rule RL_rl_invalid_wr_address
  assign CAN_FIRE_RL_rl_invalid_wr_address =
	     f_reqs_rv[140] && slave_xactor_f_wr_resp$FULL_N &&
	     rg_state_EQ_3_3_AND_NOT_f_reqs_rv_port0__read__ETC___d238 &&
	     f_reqs_rv[139] ;
  assign WILL_FIRE_RL_rl_invalid_wr_address =
	     CAN_FIRE_RL_rl_invalid_wr_address ;

  // rule RL_rl_merge_rd_req
  assign CAN_FIRE_RL_rl_merge_rd_req =
	     slave_xactor_f_rd_addr$EMPTY_N && !f_reqs_rv$port1__read[140] ;
  assign WILL_FIRE_RL_rl_merge_rd_req = CAN_FIRE_RL_rl_merge_rd_req ;

  // rule RL_rl_merge_wr_req
  assign CAN_FIRE_RL_rl_merge_wr_req =
	     !f_reqs_rv$port1__read[140] && slave_xactor_f_wr_addr$EMPTY_N &&
	     slave_xactor_f_wr_data$EMPTY_N ;
  assign WILL_FIRE_RL_rl_merge_wr_req =
	     CAN_FIRE_RL_rl_merge_wr_req && !WILL_FIRE_RL_rl_merge_rd_req ;

  // rule RL_rl_power_on_reset
  assign CAN_FIRE_RL_rl_power_on_reset = rg_state == 2'd0 ;
  assign WILL_FIRE_RL_rl_power_on_reset = CAN_FIRE_RL_rl_power_on_reset ;

  // rule RL_rl_external_reset
  assign CAN_FIRE_RL_rl_external_reset =
	     f_reset_reqs$EMPTY_N && f_reset_rsps$FULL_N && rg_state == 2'd3 ;
  assign WILL_FIRE_RL_rl_external_reset = CAN_FIRE_RL_rl_external_reset ;

  // inputs to muxes for submodule ports
  assign MUX_f_raw_mem_reqs_rv$port1__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_writeback_dirty ||
	     WILL_FIRE_RL_rl_writeback_dirty_idle ;
  assign MUX_rg_state$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_external_reset ||
	     WILL_FIRE_RL_rl_power_on_reset ;
  assign MUX_rg_state$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_miss_clean_req ||
	     WILL_FIRE_RL_rl_reset_reload_cache ;
  assign MUX_f_raw_mem_reqs_rv$port1__write_1__VAL_1 =
	     { 34'h3FFFFFFFF,
	       rg_cached_raw_mem_addr,
	       rg_cached_raw_mem_word } ;
  assign MUX_f_raw_mem_reqs_rv$port1__write_1__VAL_3 =
	     { 34'h2FFFFFFFF,
	       req_raw_mem_addr__h2965,
	       256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_f_reqs_rv$port1__write_1__VAL_1 =
	     { 2'd2, slave_xactor_f_rd_addr$D_OUT, 72'hAAAAAAAAAAAAAAAAAA } ;
  assign MUX_f_reqs_rv$port1__write_1__VAL_2 =
	     { 2'd3,
	       slave_xactor_f_wr_addr$D_OUT,
	       slave_xactor_f_wr_data$D_OUT[7:0],
	       slave_xactor_f_wr_data$D_OUT[71:8] } ;
  assign MUX_rg_cached_raw_mem_word$write_1__VAL_1 =
	     { (f_reqs_rv[79:78] == 2'd3) ?
		 updated_word64__h6971 :
		 rg_cached_raw_mem_word[255:192],
	       (f_reqs_rv[79:78] == 2'd2) ?
		 updated_word64__h6971 :
		 rg_cached_raw_mem_word[191:128],
	       (f_reqs_rv[79:78] == 2'd1) ?
		 updated_word64__h6971 :
		 rg_cached_raw_mem_word[127:64],
	       (f_reqs_rv[79:78] == 2'd0) ?
		 updated_word64__h6971 :
		 rg_cached_raw_mem_word[63:0] } ;
  assign MUX_slave_xactor_f_rd_data$enq_1__VAL_1 = { 2'd0, rdata__h3993 } ;
  assign MUX_slave_xactor_f_rd_data$enq_1__VAL_2 =
	     { 2'd2, f_reqs_rv[138:75] } ;

  // inlined wires
  assign f_reqs_rv$EN_port0__write =
	     WILL_FIRE_RL_rl_invalid_wr_address ||
	     WILL_FIRE_RL_rl_invalid_rd_address ||
	     WILL_FIRE_RL_rl_process_wr_req ||
	     WILL_FIRE_RL_rl_process_rd_req ;
  assign f_reqs_rv$port1__read =
	     f_reqs_rv$EN_port0__write ?
	       141'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       f_reqs_rv ;
  assign f_reqs_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_merge_rd_req || WILL_FIRE_RL_rl_merge_wr_req ;
  assign f_reqs_rv$port1__write_1 =
	     WILL_FIRE_RL_rl_merge_rd_req ?
	       MUX_f_reqs_rv$port1__write_1__VAL_1 :
	       MUX_f_reqs_rv$port1__write_1__VAL_2 ;
  assign f_reqs_rv$port2__read =
	     f_reqs_rv$EN_port1__write ?
	       f_reqs_rv$port1__write_1 :
	       f_reqs_rv$port1__read ;
  assign f_raw_mem_reqs_rv$port1__read =
	     EN_to_raw_mem_request_get ?
	       354'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       f_raw_mem_reqs_rv ;
  assign f_raw_mem_reqs_rv$EN_port1__write =
	     WILL_FIRE_RL_rl_writeback_dirty ||
	     WILL_FIRE_RL_rl_writeback_dirty_idle ||
	     WILL_FIRE_RL_rl_reset_reload_cache ||
	     WILL_FIRE_RL_rl_miss_clean_req ;
  always@(MUX_f_raw_mem_reqs_rv$port1__write_1__SEL_1 or
	  MUX_f_raw_mem_reqs_rv$port1__write_1__VAL_1 or
	  WILL_FIRE_RL_rl_reset_reload_cache or
	  WILL_FIRE_RL_rl_miss_clean_req or
	  MUX_f_raw_mem_reqs_rv$port1__write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_f_raw_mem_reqs_rv$port1__write_1__SEL_1:
	  f_raw_mem_reqs_rv$port1__write_1 =
	      MUX_f_raw_mem_reqs_rv$port1__write_1__VAL_1;
      WILL_FIRE_RL_rl_reset_reload_cache:
	  f_raw_mem_reqs_rv$port1__write_1 =
	      354'h2FFFFFFFF0000000000000000AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      WILL_FIRE_RL_rl_miss_clean_req:
	  f_raw_mem_reqs_rv$port1__write_1 =
	      MUX_f_raw_mem_reqs_rv$port1__write_1__VAL_3;
      default: f_raw_mem_reqs_rv$port1__write_1 =
		   354'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_raw_mem_reqs_rv$port2__read =
	     f_raw_mem_reqs_rv$EN_port1__write ?
	       f_raw_mem_reqs_rv$port1__write_1 :
	       f_raw_mem_reqs_rv$port1__read ;
  assign f_raw_mem_reqs_rv$port3__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       354'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       f_raw_mem_reqs_rv$port2__read ;
  assign f_raw_mem_rsps_rv$port1__read =
	     CAN_FIRE_RL_rl_reload ?
	       257'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       f_raw_mem_rsps_rv ;
  assign f_raw_mem_rsps_rv$port1__write_1 =
	     { 1'd1, to_raw_mem_response_put } ;
  assign f_raw_mem_rsps_rv$port2__read =
	     EN_to_raw_mem_response_put ?
	       f_raw_mem_rsps_rv$port1__write_1 :
	       f_raw_mem_rsps_rv$port1__read ;
  assign f_raw_mem_rsps_rv$port3__read =
	     MUX_rg_state$write_1__SEL_1 ?
	       257'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA :
	       f_raw_mem_rsps_rv$port2__read ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = 4'h0 ;
  assign cfg_verbosity$EN = 1'b0 ;

  // register f_raw_mem_reqs_rv
  assign f_raw_mem_reqs_rv$D_IN = f_raw_mem_reqs_rv$port3__read ;
  assign f_raw_mem_reqs_rv$EN = 1'b1 ;

  // register f_raw_mem_rsps_rv
  assign f_raw_mem_rsps_rv$D_IN = f_raw_mem_rsps_rv$port3__read ;
  assign f_raw_mem_rsps_rv$EN = 1'b1 ;

  // register f_reqs_rv
  assign f_reqs_rv$D_IN = f_reqs_rv$port2__read ;
  assign f_reqs_rv$EN = 1'b1 ;

  // register rg_addr_base
  assign rg_addr_base$D_IN = set_addr_map_addr_base ;
  assign rg_addr_base$EN = EN_set_addr_map ;

  // register rg_addr_lim
  assign rg_addr_lim$D_IN = set_addr_map_addr_lim ;
  assign rg_addr_lim$EN = EN_set_addr_map ;

  // register rg_cached_clean
  assign rg_cached_clean$D_IN = !WILL_FIRE_RL_rl_process_wr_req ;
  assign rg_cached_clean$EN =
	     WILL_FIRE_RL_rl_process_wr_req || WILL_FIRE_RL_rl_reload ||
	     WILL_FIRE_RL_rl_writeback_dirty ||
	     WILL_FIRE_RL_rl_writeback_dirty_idle ;

  // register rg_cached_raw_mem_addr
  assign rg_cached_raw_mem_addr$D_IN =
	     WILL_FIRE_RL_rl_miss_clean_req ?
	       req_raw_mem_addr__h2965 :
	       64'd0 ;
  assign rg_cached_raw_mem_addr$EN = MUX_rg_state$write_1__SEL_2 ;

  // register rg_cached_raw_mem_word
  assign rg_cached_raw_mem_word$D_IN =
	     WILL_FIRE_RL_rl_process_wr_req ?
	       MUX_rg_cached_raw_mem_word$write_1__VAL_1 :
	       f_raw_mem_rsps_rv[255:0] ;
  assign rg_cached_raw_mem_word$EN =
	     WILL_FIRE_RL_rl_process_wr_req || WILL_FIRE_RL_rl_reload ;

  // register rg_state
  always@(MUX_rg_state$write_1__SEL_1 or
	  MUX_rg_state$write_1__SEL_2 or WILL_FIRE_RL_rl_reload)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_state$write_1__SEL_1: rg_state$D_IN = 2'd1;
      MUX_rg_state$write_1__SEL_2: rg_state$D_IN = 2'd2;
      WILL_FIRE_RL_rl_reload: rg_state$D_IN = 2'd3;
      default: rg_state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_external_reset ||
	     WILL_FIRE_RL_rl_power_on_reset ||
	     WILL_FIRE_RL_rl_miss_clean_req ||
	     WILL_FIRE_RL_rl_reset_reload_cache ||
	     WILL_FIRE_RL_rl_reload ;

  // submodule f_reset_reqs
  assign f_reset_reqs$ENQ = EN_server_reset_request_put ;
  assign f_reset_reqs$DEQ = CAN_FIRE_RL_rl_external_reset ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$ENQ = CAN_FIRE_RL_rl_external_reset ;
  assign f_reset_rsps$DEQ = EN_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule slave_xactor_f_rd_addr
  assign slave_xactor_f_rd_addr$D_IN = { slave_araddr, slave_arprot } ;
  assign slave_xactor_f_rd_addr$ENQ =
	     slave_arvalid && slave_xactor_f_rd_addr$FULL_N ;
  assign slave_xactor_f_rd_addr$DEQ = CAN_FIRE_RL_rl_merge_rd_req ;
  assign slave_xactor_f_rd_addr$CLR = MUX_rg_state$write_1__SEL_1 ;

  // submodule slave_xactor_f_rd_data
  assign slave_xactor_f_rd_data$D_IN =
	     WILL_FIRE_RL_rl_process_rd_req ?
	       MUX_slave_xactor_f_rd_data$enq_1__VAL_1 :
	       MUX_slave_xactor_f_rd_data$enq_1__VAL_2 ;
  assign slave_xactor_f_rd_data$ENQ =
	     WILL_FIRE_RL_rl_process_rd_req ||
	     WILL_FIRE_RL_rl_invalid_rd_address ;
  assign slave_xactor_f_rd_data$DEQ =
	     slave_rready && slave_xactor_f_rd_data$EMPTY_N ;
  assign slave_xactor_f_rd_data$CLR = MUX_rg_state$write_1__SEL_1 ;

  // submodule slave_xactor_f_wr_addr
  assign slave_xactor_f_wr_addr$D_IN = { slave_awaddr, slave_awprot } ;
  assign slave_xactor_f_wr_addr$ENQ =
	     slave_awvalid && slave_xactor_f_wr_addr$FULL_N ;
  assign slave_xactor_f_wr_addr$DEQ = WILL_FIRE_RL_rl_merge_wr_req ;
  assign slave_xactor_f_wr_addr$CLR = MUX_rg_state$write_1__SEL_1 ;

  // submodule slave_xactor_f_wr_data
  assign slave_xactor_f_wr_data$D_IN = { slave_wdata, slave_wstrb } ;
  assign slave_xactor_f_wr_data$ENQ =
	     slave_wvalid && slave_xactor_f_wr_data$FULL_N ;
  assign slave_xactor_f_wr_data$DEQ = WILL_FIRE_RL_rl_merge_wr_req ;
  assign slave_xactor_f_wr_data$CLR = MUX_rg_state$write_1__SEL_1 ;

  // submodule slave_xactor_f_wr_resp
  assign slave_xactor_f_wr_resp$D_IN =
	     WILL_FIRE_RL_rl_process_wr_req ? 2'd0 : 2'd2 ;
  assign slave_xactor_f_wr_resp$ENQ =
	     WILL_FIRE_RL_rl_process_wr_req ||
	     WILL_FIRE_RL_rl_invalid_wr_address ;
  assign slave_xactor_f_wr_resp$DEQ =
	     slave_bready && slave_xactor_f_wr_resp$EMPTY_N ;
  assign slave_xactor_f_wr_resp$CLR = MUX_rg_state$write_1__SEL_1 ;

  // remaining internal signals
  assign IF_n2989_BIT_2_THEN_IF_n2989_BIT_1_THEN_IF_n29_ETC__q2 =
	     n2__h3989[2] ?
	       (n2__h3989[1] ?
		  (n2__h3989[0] ?
		     { rg_cached_raw_mem_word[31:0],
		       rg_cached_raw_mem_word[255:64] } :
		     { rg_cached_raw_mem_word[63:0],
		       rg_cached_raw_mem_word[255:96] }) :
		  (n2__h3989[0] ?
		     { rg_cached_raw_mem_word[95:0],
		       rg_cached_raw_mem_word[255:128] } :
		     { rg_cached_raw_mem_word[127:0],
		       rg_cached_raw_mem_word[255:160] })) :
	       (n2__h3989[1] ?
		  (n2__h3989[0] ?
		     { rg_cached_raw_mem_word[159:0],
		       rg_cached_raw_mem_word[255:192] } :
		     { rg_cached_raw_mem_word[191:0],
		       rg_cached_raw_mem_word[255:224] }) :
		  (n2__h3989[0] ?
		     rg_cached_raw_mem_word[223:0] :
		     rg_cached_raw_mem_word[255:32])) ;
  assign NOT_cfg_verbosity_read_ULE_1___d5 = cfg_verbosity > 4'd1 ;
  assign NOT_cfg_verbosity_read_ULE_2_2___d33 = cfg_verbosity > 4'd2 ;
  assign SEXT_f_reqs_rv_port0__read__2_BIT_64_95___d196 = {8{f_reqs_rv[64]}} ;
  assign SEXT_f_reqs_rv_port0__read__2_BIT_65_92___d193 = {8{f_reqs_rv[65]}} ;
  assign SEXT_f_reqs_rv_port0__read__2_BIT_66_88___d189 = {8{f_reqs_rv[66]}} ;
  assign SEXT_f_reqs_rv_port0__read__2_BIT_67_85___d186 = {8{f_reqs_rv[67]}} ;
  assign SEXT_f_reqs_rv_port0__read__2_BIT_68_81___d182 = {8{f_reqs_rv[68]}} ;
  assign SEXT_f_reqs_rv_port0__read__2_BIT_69_78___d179 = {8{f_reqs_rv[69]}} ;
  assign SEXT_f_reqs_rv_port0__read__2_BIT_70_74___d175 = {8{f_reqs_rv[70]}} ;
  assign SEXT_f_reqs_rv_port0__read__2_BIT_71_71___d172 = {8{f_reqs_rv[71]}} ;
  assign exit_value__h8954 = { 1'd0, f_reqs_rv[63:1] } ;
  assign f_reqs_rv_BITS_138_TO_75_MINUS_rg_addr_base__q1 =
	     f_reqs_rv[138:75] - rg_addr_base ;
  assign f_reqs_rv_port0__read__2_BITS_138_TO_75_9_ULT__ETC___d72 =
	     f_reqs_rv[138:75] < rg_addr_lim ;
  assign mask__h6970 =
	     { SEXT_f_reqs_rv_port0__read__2_BIT_71_71___d172,
	       SEXT_f_reqs_rv_port0__read__2_BIT_70_74___d175,
	       SEXT_f_reqs_rv_port0__read__2_BIT_69_78___d179,
	       SEXT_f_reqs_rv_port0__read__2_BIT_68_81___d182,
	       SEXT_f_reqs_rv_port0__read__2_BIT_67_85___d186,
	       SEXT_f_reqs_rv_port0__read__2_BIT_66_88___d189,
	       SEXT_f_reqs_rv_port0__read__2_BIT_65_92___d193,
	       SEXT_f_reqs_rv_port0__read__2_BIT_64_95___d196 } ;
  assign n2__h3988 = { 13'd0, f_reqs_rv[79:77] } ;
  assign n2__h3989 = 16'd8 - n2__h3988 ;
  assign rdata__h3993 =
	     { IF_n2989_BIT_2_THEN_IF_n2989_BIT_1_THEN_IF_n29_ETC__q2[31:0],
	       n2__h3989[2] ?
		 (n2__h3989[1] ?
		    (n2__h3989[0] ?
		       rg_cached_raw_mem_word[63:32] :
		       rg_cached_raw_mem_word[95:64]) :
		    (n2__h3989[0] ?
		       rg_cached_raw_mem_word[127:96] :
		       rg_cached_raw_mem_word[159:128])) :
		 (n2__h3989[1] ?
		    (n2__h3989[0] ?
		       rg_cached_raw_mem_word[191:160] :
		       rg_cached_raw_mem_word[223:192]) :
		    (n2__h3989[0] ?
		       rg_cached_raw_mem_word[255:224] :
		       rg_cached_raw_mem_word[31:0])) } ;
  assign req_raw_mem_addr__h2965 =
	     { 5'd0, f_reqs_rv_BITS_138_TO_75_MINUS_rg_addr_base__q1[63:5] } ;
  assign rg_addr_base_8_ULE_f_reqs_rv_port0__read__2_BI_ETC___d70 =
	     rg_addr_base <= f_reqs_rv[138:75] ;
  assign rg_cached_raw_mem_addr_0_EQ_0_CONCAT_f_reqs_rv_ETC___d79 =
	     rg_cached_raw_mem_addr == req_raw_mem_addr__h2965 ;
  assign rg_state_EQ_3_3_AND_NOT_f_reqs_rv_port0__read__ETC___d238 =
	     rg_state == 2'd3 &&
	     (f_reqs_rv[77:75] != 3'b0 ||
	      !rg_addr_base_8_ULE_f_reqs_rv_port0__read__2_BI_ETC___d70 ||
	      !f_reqs_rv_port0__read__2_BITS_138_TO_75_9_ULT__ETC___d72) ;
  assign rg_state_EQ_3_3_AND_f_reqs_rv_port0__read__2_B_ETC___d75 =
	     rg_state == 2'd3 && f_reqs_rv[77:75] == 3'b0 &&
	     rg_addr_base_8_ULE_f_reqs_rv_port0__read__2_BI_ETC___d70 &&
	     f_reqs_rv_port0__read__2_BITS_138_TO_75_9_ULT__ETC___d72 ;
  assign updated_word64__h6971 = x__h7344 | y__h7345 ;
  assign x__h7344 = word64_old__h6965 & y__h7346 ;
  assign y__h7345 = f_reqs_rv[63:0] & mask__h6970 ;
  assign y__h7346 =
	     { ~SEXT_f_reqs_rv_port0__read__2_BIT_71_71___d172,
	       ~SEXT_f_reqs_rv_port0__read__2_BIT_70_74___d175,
	       ~SEXT_f_reqs_rv_port0__read__2_BIT_69_78___d179,
	       ~SEXT_f_reqs_rv_port0__read__2_BIT_68_81___d182,
	       ~SEXT_f_reqs_rv_port0__read__2_BIT_67_85___d186,
	       ~SEXT_f_reqs_rv_port0__read__2_BIT_66_88___d189,
	       ~SEXT_f_reqs_rv_port0__read__2_BIT_65_92___d193,
	       ~SEXT_f_reqs_rv_port0__read__2_BIT_64_95___d196 } ;
  always@(f_reqs_rv or rg_cached_raw_mem_word)
  begin
    case (f_reqs_rv[79:78])
      2'd0: word64_old__h6965 = rg_cached_raw_mem_word[63:0];
      2'd1: word64_old__h6965 = rg_cached_raw_mem_word[127:64];
      2'd2: word64_old__h6965 = rg_cached_raw_mem_word[191:128];
      2'd3: word64_old__h6965 = rg_cached_raw_mem_word[255:192];
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	f_raw_mem_reqs_rv <= `BSV_ASSIGNMENT_DELAY
	    354'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	f_raw_mem_rsps_rv <= `BSV_ASSIGNMENT_DELAY
	    257'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	f_reqs_rv <= `BSV_ASSIGNMENT_DELAY
	    141'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (f_raw_mem_reqs_rv$EN)
	  f_raw_mem_reqs_rv <= `BSV_ASSIGNMENT_DELAY f_raw_mem_reqs_rv$D_IN;
	if (f_raw_mem_rsps_rv$EN)
	  f_raw_mem_rsps_rv <= `BSV_ASSIGNMENT_DELAY f_raw_mem_rsps_rv$D_IN;
	if (f_reqs_rv$EN) f_reqs_rv <= `BSV_ASSIGNMENT_DELAY f_reqs_rv$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
    if (rg_addr_base$EN)
      rg_addr_base <= `BSV_ASSIGNMENT_DELAY rg_addr_base$D_IN;
    if (rg_addr_lim$EN) rg_addr_lim <= `BSV_ASSIGNMENT_DELAY rg_addr_lim$D_IN;
    if (rg_cached_clean$EN)
      rg_cached_clean <= `BSV_ASSIGNMENT_DELAY rg_cached_clean$D_IN;
    if (rg_cached_raw_mem_addr$EN)
      rg_cached_raw_mem_addr <= `BSV_ASSIGNMENT_DELAY
	  rg_cached_raw_mem_addr$D_IN;
    if (rg_cached_raw_mem_word$EN)
      rg_cached_raw_mem_word <= `BSV_ASSIGNMENT_DELAY
	  rg_cached_raw_mem_word$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_verbosity = 4'hA;
    f_raw_mem_reqs_rv =
	354'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    f_raw_mem_rsps_rv =
	257'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    f_reqs_rv = 141'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_addr_base = 64'hAAAAAAAAAAAAAAAA;
    rg_addr_lim = 64'hAAAAAAAAAAAAAAAA;
    rg_cached_clean = 1'h0;
    rg_cached_raw_mem_addr = 64'hAAAAAAAAAAAAAAAA;
    rg_cached_raw_mem_word =
	256'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    rg_state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_reload_cache &&
	  NOT_cfg_verbosity_read_ULE_1___d5)
	begin
	  v__h2398 = $stime;
	  #0;
	end
    v__h2392 = v__h2398 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_reload_cache &&
	  NOT_cfg_verbosity_read_ULE_1___d5)
	$display("%0d: Mem_Controller.rl_reset_reload_cache => STATE_RELOADING",
		 v__h2392);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_dirty_idle &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	begin
	  v__h3134 = $stime;
	  #0;
	end
    v__h3128 = v__h3134 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_dirty_idle &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$display("%0d: Mem_Controller.rl_writeback_dirty_idle to raw addr 0x%0h",
		 v__h3128,
		 rg_cached_raw_mem_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_dirty &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	begin
	  v__h3375 = $stime;
	  #0;
	end
    v__h3369 = v__h3375 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_writeback_dirty &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$display("%0d: Mem_Controller.rl_writeback_dirty to raw addr 0x%0h",
		 v__h3369,
		 rg_cached_raw_mem_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_miss_clean_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	begin
	  v__h3598 = $stime;
	  #0;
	end
    v__h3592 = v__h3598 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_miss_clean_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$display("%0d: Mem_Controller.rl_miss_clean_req: read raw addr 0x%0h",
		 v__h3592,
		 req_raw_mem_addr__h2965);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && NOT_cfg_verbosity_read_ULE_2_2___d33)
	begin
	  v__h3861 = $stime;
	  #0;
	end
    v__h3855 = v__h3861 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && NOT_cfg_verbosity_read_ULE_2_2___d33)
	$display("%0d: Mem_Controller.rl_reload: raw addr 0x%0h",
		 v__h3855,
		 rg_cached_raw_mem_addr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("'h%h", f_raw_mem_rsps_rv[255:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reload && NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	begin
	  v__h6784 = $stime;
	  #0;
	end
    v__h6778 = v__h6784 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$display("%0d: Mem_Controller.rl_process_rd_req: ", v__h6778);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("Req { ", "req_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("REQ_OP_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[138:75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "prot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[74:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "user: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[71:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("     => ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", rdata__h3993);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_rd_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	begin
	  v__h8724 = $stime;
	  #0;
	end
    v__h8718 = v__h8724 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$display("%0d: Mem_Controller.rl_process_wr_req: ", v__h8718);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("Req { ", "req_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("REQ_OP_WR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[138:75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "prot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[74:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "user: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[71:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", f_reqs_rv[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("     => ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("AXI4_LITE_OKAY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && NOT_cfg_verbosity_read_ULE_1___d5)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req)
	begin
	  TASK_testplusargs___d217 = $test$plusargs("tohost");
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && TASK_testplusargs___d217 &&
	  f_reqs_rv[138:75] == 64'h0000000080001000 &&
	  f_reqs_rv[63:0] != 64'd0)
	begin
	  v__h8918 = $stime;
	  #0;
	end
    v__h8912 = v__h8918 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && TASK_testplusargs___d217 &&
	  f_reqs_rv[138:75] == 64'h0000000080001000 &&
	  f_reqs_rv[63:0] != 64'd0)
	$display("%0d: Mem_Controller.rl_process_wr_req: addr 0x%0h (<tohost>) data 0x%0h",
		 v__h8912,
		 64'h0000000080001000,
		 f_reqs_rv[63:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && TASK_testplusargs___d217 &&
	  f_reqs_rv[138:75] == 64'h0000000080001000 &&
	  f_reqs_rv[63:0] != 64'd0 &&
	  f_reqs_rv[63:1] == 63'd0)
	$display("PASS");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && TASK_testplusargs___d217 &&
	  f_reqs_rv[138:75] == 64'h0000000080001000 &&
	  f_reqs_rv[63:0] != 64'd0 &&
	  f_reqs_rv[63:1] != 63'd0)
	$display("FAIL %0d", exit_value__h8954);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_process_wr_req && TASK_testplusargs___d217 &&
	  f_reqs_rv[138:75] == 64'h0000000080001000 &&
	  f_reqs_rv[63:0] != 64'd0)
	$finish({ 30'd0, f_reqs_rv[2:1] });
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	begin
	  v__h9199 = $stime;
	  #0;
	end
    v__h9193 = v__h9199 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("%0d: ERROR: Mem_Controller:", v__h9193);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address && f_reqs_rv[77:75] == 3'b0)
	$display(" read-addr is out of bounds");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address && f_reqs_rv[77:75] != 3'b0)
	$display(" read-addr is misaligned");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$display("        rg_addr_base 0x%0h  rg_addr_lim 0x%0h",
		 rg_addr_base,
		 rg_addr_lim);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("Req { ", "req_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("REQ_OP_RD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[138:75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "prot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[74:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "user: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[71:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("     => ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("AXI4_Lite_Rd_Data { ", "rresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "rdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address)
	$write("'h%h", f_reqs_rv[138:75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write(", ", "ruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_rd_address) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	begin
	  v__h9557 = $stime;
	  #0;
	end
    v__h9551 = v__h9557 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("%0d: ERROR: Mem_Controller:", v__h9551);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address && f_reqs_rv[77:75] == 3'b0)
	$display(" write-addr is out of bounds");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address && f_reqs_rv[77:75] != 3'b0)
	$display(" write-addr is misaligned");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$display("        rg_addr_base 0x%0h  rg_addr_lim 0x%0h",
		 rg_addr_base,
		 rg_addr_lim);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("Req { ", "req_op: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("REQ_OP_WR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "addr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[138:75]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "prot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[74:72]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "user: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("'h%h", 1'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[71:64]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "data: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("'h%h", f_reqs_rv[63:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("     => ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address)
	$write("AXI4_Lite_Wr_Resp { ", "bresp: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("AXI4_LITE_SLVERR");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write(", ", "buser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_invalid_wr_address) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_addr_map)
	begin
	  v__h9952 = $stime;
	  #0;
	end
    v__h9946 = v__h9952 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_set_addr_map)
	$display("%0d: Mem_Controller.set_addr_map: addr_base 0x%0h addr_lim 0x%0h",
		 v__h9946,
		 set_addr_map_addr_base,
		 set_addr_map_addr_lim);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	begin
	  v__h2640 = $stime;
	  #0;
	end
    v__h2634 = v__h2640 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$display("%0d: Mem_Controller.rl_merge_rd_req", v__h2634);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("AXI4_Lite_Rd_Addr { ", "araddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write(", ", "arprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("'h%h", slave_xactor_f_rd_addr$D_OUT[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write(", ", "aruser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_rd_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	begin
	  v__h2883 = $stime;
	  #0;
	end
    v__h2877 = v__h2883 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$display("%0d: Mem_Controller.rl_merge_wr_req", v__h2877);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("AXI4_Lite_Wr_Addr { ", "awaddr: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[66:3]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write(", ", "awprot: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("'h%h", slave_xactor_f_wr_addr$D_OUT[2:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write(", ", "awuser: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("'h%h", 1'd0, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("AXI4_Lite_Wr_Data { ", "wdata: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("'h%h", slave_xactor_f_wr_data$D_OUT[71:8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write(", ", "wstrb: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("'h%h", slave_xactor_f_wr_data$D_OUT[7:0], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_merge_wr_req &&
	  NOT_cfg_verbosity_read_ULE_2_2___d33)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_power_on_reset && NOT_cfg_verbosity_read_ULE_1___d5)
	begin
	  v__h1638 = $stime;
	  #0;
	end
    v__h1632 = v__h1638 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_power_on_reset && NOT_cfg_verbosity_read_ULE_1___d5)
	$display("%0d: Mem_Controller.rl_power_on_reset", v__h1632);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_external_reset && NOT_cfg_verbosity_read_ULE_1___d5)
	begin
	  v__h1960 = $stime;
	  #0;
	end
    v__h1954 = v__h1960 / 32'd10;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_external_reset && NOT_cfg_verbosity_read_ULE_1___d5)
	$display("%0d: Mem_Controller.rl_external_reset => STATE_RESET_RELOAD_CACHE",
		 v__h1954);
  end
  // synopsys translate_on
endmodule  // mkMem_Controller

