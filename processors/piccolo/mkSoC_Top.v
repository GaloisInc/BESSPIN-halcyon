//
// Generated by Bluespec Compiler, version 2017.07.A (build 1da80f1, 2017-07-21)
//
// On Sun Jul 29 16:56:17 EDT 2018
//
//
// Ports:
// Name                         I/O  size props
// to_raw_mem_request_get         O   353
// RDY_to_raw_mem_request_get     O     1
// RDY_to_raw_mem_response_put    O     1
// get_to_console_get             O     8 reg
// RDY_get_to_console_get         O     1 reg
// RDY_put_from_console_put       O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// to_raw_mem_response_put        I   256
// put_from_console_put           I     8 reg
// EN_to_raw_mem_response_put     I     1
// EN_put_from_console_put        I     1
// EN_to_raw_mem_request_get      I     1
// EN_get_to_console_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSoC_Top(CLK,
		 RST_N,

		 EN_to_raw_mem_request_get,
		 to_raw_mem_request_get,
		 RDY_to_raw_mem_request_get,

		 to_raw_mem_response_put,
		 EN_to_raw_mem_response_put,
		 RDY_to_raw_mem_response_put,

		 EN_get_to_console_get,
		 get_to_console_get,
		 RDY_get_to_console_get,

		 put_from_console_put,
		 EN_put_from_console_put,
		 RDY_put_from_console_put);
  input  CLK;
  input  RST_N;

  // actionvalue method to_raw_mem_request_get
  input  EN_to_raw_mem_request_get;
  output [352 : 0] to_raw_mem_request_get;
  output RDY_to_raw_mem_request_get;

  // action method to_raw_mem_response_put
  input  [255 : 0] to_raw_mem_response_put;
  input  EN_to_raw_mem_response_put;
  output RDY_to_raw_mem_response_put;

  // actionvalue method get_to_console_get
  input  EN_get_to_console_get;
  output [7 : 0] get_to_console_get;
  output RDY_get_to_console_get;

  // action method put_from_console_put
  input  [7 : 0] put_from_console_put;
  input  EN_put_from_console_put;
  output RDY_put_from_console_put;

  // signals for module outputs
  wire [352 : 0] to_raw_mem_request_get;
  wire [7 : 0] get_to_console_get;
  wire RDY_get_to_console_get,
       RDY_put_from_console_put,
       RDY_to_raw_mem_request_get,
       RDY_to_raw_mem_response_put;

  // register rg_state
  reg [1 : 0] rg_state;
  wire [1 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // ports of submodule boot_rom
  wire [63 : 0] boot_rom$set_addr_map_addr_base,
		boot_rom$set_addr_map_addr_lim,
		boot_rom$slave_araddr,
		boot_rom$slave_awaddr,
		boot_rom$slave_rdata,
		boot_rom$slave_wdata;
  wire [7 : 0] boot_rom$slave_wstrb;
  wire [2 : 0] boot_rom$slave_arprot, boot_rom$slave_awprot;
  wire [1 : 0] boot_rom$slave_bresp, boot_rom$slave_rresp;
  wire boot_rom$EN_set_addr_map,
       boot_rom$slave_arready,
       boot_rom$slave_arvalid,
       boot_rom$slave_awready,
       boot_rom$slave_awvalid,
       boot_rom$slave_bready,
       boot_rom$slave_bvalid,
       boot_rom$slave_rready,
       boot_rom$slave_rvalid,
       boot_rom$slave_wready,
       boot_rom$slave_wvalid;

  // ports of submodule brvf_core
  wire [63 : 0] brvf_core$cpu_dmem_master_araddr,
		brvf_core$cpu_dmem_master_awaddr,
		brvf_core$cpu_dmem_master_rdata,
		brvf_core$cpu_dmem_master_wdata,
		brvf_core$cpu_imem_master_araddr,
		brvf_core$cpu_imem_master_awaddr,
		brvf_core$cpu_imem_master_rdata,
		brvf_core$cpu_imem_master_wdata,
		brvf_core$cpu_slave_araddr,
		brvf_core$cpu_slave_awaddr,
		brvf_core$cpu_slave_rdata,
		brvf_core$cpu_slave_wdata;
  wire [7 : 0] brvf_core$cpu_dmem_master_wstrb,
	       brvf_core$cpu_imem_master_wstrb,
	       brvf_core$cpu_slave_wstrb;
  wire [2 : 0] brvf_core$cpu_dmem_master_arprot,
	       brvf_core$cpu_dmem_master_awprot,
	       brvf_core$cpu_imem_master_arprot,
	       brvf_core$cpu_imem_master_awprot,
	       brvf_core$cpu_slave_arprot,
	       brvf_core$cpu_slave_awprot;
  wire [1 : 0] brvf_core$cpu_dmem_master_bresp,
	       brvf_core$cpu_dmem_master_rresp,
	       brvf_core$cpu_imem_master_bresp,
	       brvf_core$cpu_imem_master_rresp,
	       brvf_core$cpu_slave_bresp,
	       brvf_core$cpu_slave_rresp;
  wire brvf_core$EN_cpu_external_interrupt_req,
       brvf_core$EN_cpu_reset_server_request_put,
       brvf_core$EN_cpu_reset_server_response_get,
       brvf_core$EN_cpu_software_interrupt_req,
       brvf_core$EN_cpu_timer_interrupt_req,
       brvf_core$RDY_cpu_reset_server_request_put,
       brvf_core$RDY_cpu_reset_server_response_get,
       brvf_core$RDY_cpu_software_interrupt_req,
       brvf_core$RDY_cpu_timer_interrupt_req,
       brvf_core$cpu_dmem_master_arready,
       brvf_core$cpu_dmem_master_arvalid,
       brvf_core$cpu_dmem_master_awready,
       brvf_core$cpu_dmem_master_awvalid,
       brvf_core$cpu_dmem_master_bready,
       brvf_core$cpu_dmem_master_bvalid,
       brvf_core$cpu_dmem_master_rready,
       brvf_core$cpu_dmem_master_rvalid,
       brvf_core$cpu_dmem_master_wready,
       brvf_core$cpu_dmem_master_wvalid,
       brvf_core$cpu_external_interrupt_req_set_not_clear,
       brvf_core$cpu_imem_master_arready,
       brvf_core$cpu_imem_master_arvalid,
       brvf_core$cpu_imem_master_awready,
       brvf_core$cpu_imem_master_awvalid,
       brvf_core$cpu_imem_master_bready,
       brvf_core$cpu_imem_master_bvalid,
       brvf_core$cpu_imem_master_rready,
       brvf_core$cpu_imem_master_rvalid,
       brvf_core$cpu_imem_master_wready,
       brvf_core$cpu_imem_master_wvalid,
       brvf_core$cpu_slave_arready,
       brvf_core$cpu_slave_arvalid,
       brvf_core$cpu_slave_awready,
       brvf_core$cpu_slave_awvalid,
       brvf_core$cpu_slave_bready,
       brvf_core$cpu_slave_bvalid,
       brvf_core$cpu_slave_rready,
       brvf_core$cpu_slave_rvalid,
       brvf_core$cpu_slave_wready,
       brvf_core$cpu_slave_wvalid,
       brvf_core$cpu_software_interrupt_req_set_not_clear,
       brvf_core$cpu_timer_interrupt_req_set_not_clear;

  // ports of submodule fabric
  wire [63 : 0] fabric$v_from_masters_0_araddr,
		fabric$v_from_masters_0_awaddr,
		fabric$v_from_masters_0_wdata,
		fabric$v_from_masters_1_araddr,
		fabric$v_from_masters_1_awaddr,
		fabric$v_from_masters_1_rdata,
		fabric$v_from_masters_1_wdata,
		fabric$v_from_masters_2_araddr,
		fabric$v_from_masters_2_awaddr,
		fabric$v_from_masters_2_rdata,
		fabric$v_from_masters_2_wdata,
		fabric$v_to_slaves_0_araddr,
		fabric$v_to_slaves_0_awaddr,
		fabric$v_to_slaves_0_rdata,
		fabric$v_to_slaves_0_wdata,
		fabric$v_to_slaves_1_araddr,
		fabric$v_to_slaves_1_awaddr,
		fabric$v_to_slaves_1_rdata,
		fabric$v_to_slaves_1_wdata,
		fabric$v_to_slaves_2_araddr,
		fabric$v_to_slaves_2_awaddr,
		fabric$v_to_slaves_2_rdata,
		fabric$v_to_slaves_2_wdata,
		fabric$v_to_slaves_3_araddr,
		fabric$v_to_slaves_3_awaddr,
		fabric$v_to_slaves_3_rdata,
		fabric$v_to_slaves_3_wdata,
		fabric$v_to_slaves_4_araddr,
		fabric$v_to_slaves_4_awaddr,
		fabric$v_to_slaves_4_rdata,
		fabric$v_to_slaves_4_wdata;
  wire [7 : 0] fabric$v_from_masters_0_wstrb,
	       fabric$v_from_masters_1_wstrb,
	       fabric$v_from_masters_2_wstrb,
	       fabric$v_to_slaves_0_wstrb,
	       fabric$v_to_slaves_1_wstrb,
	       fabric$v_to_slaves_2_wstrb,
	       fabric$v_to_slaves_3_wstrb,
	       fabric$v_to_slaves_4_wstrb;
  wire [3 : 0] fabric$set_verbosity_verbosity;
  wire [2 : 0] fabric$v_from_masters_0_arprot,
	       fabric$v_from_masters_0_awprot,
	       fabric$v_from_masters_1_arprot,
	       fabric$v_from_masters_1_awprot,
	       fabric$v_from_masters_2_arprot,
	       fabric$v_from_masters_2_awprot,
	       fabric$v_to_slaves_0_arprot,
	       fabric$v_to_slaves_0_awprot,
	       fabric$v_to_slaves_1_arprot,
	       fabric$v_to_slaves_1_awprot,
	       fabric$v_to_slaves_2_arprot,
	       fabric$v_to_slaves_2_awprot,
	       fabric$v_to_slaves_3_arprot,
	       fabric$v_to_slaves_3_awprot,
	       fabric$v_to_slaves_4_arprot,
	       fabric$v_to_slaves_4_awprot;
  wire [1 : 0] fabric$v_from_masters_1_bresp,
	       fabric$v_from_masters_1_rresp,
	       fabric$v_from_masters_2_bresp,
	       fabric$v_from_masters_2_rresp,
	       fabric$v_to_slaves_0_bresp,
	       fabric$v_to_slaves_0_rresp,
	       fabric$v_to_slaves_1_bresp,
	       fabric$v_to_slaves_1_rresp,
	       fabric$v_to_slaves_2_bresp,
	       fabric$v_to_slaves_2_rresp,
	       fabric$v_to_slaves_3_bresp,
	       fabric$v_to_slaves_3_rresp,
	       fabric$v_to_slaves_4_bresp,
	       fabric$v_to_slaves_4_rresp;
  wire fabric$EN_reset,
       fabric$EN_set_verbosity,
       fabric$v_from_masters_0_arvalid,
       fabric$v_from_masters_0_awvalid,
       fabric$v_from_masters_0_bready,
       fabric$v_from_masters_0_rready,
       fabric$v_from_masters_0_wvalid,
       fabric$v_from_masters_1_arready,
       fabric$v_from_masters_1_arvalid,
       fabric$v_from_masters_1_awready,
       fabric$v_from_masters_1_awvalid,
       fabric$v_from_masters_1_bready,
       fabric$v_from_masters_1_bvalid,
       fabric$v_from_masters_1_rready,
       fabric$v_from_masters_1_rvalid,
       fabric$v_from_masters_1_wready,
       fabric$v_from_masters_1_wvalid,
       fabric$v_from_masters_2_arready,
       fabric$v_from_masters_2_arvalid,
       fabric$v_from_masters_2_awready,
       fabric$v_from_masters_2_awvalid,
       fabric$v_from_masters_2_bready,
       fabric$v_from_masters_2_bvalid,
       fabric$v_from_masters_2_rready,
       fabric$v_from_masters_2_rvalid,
       fabric$v_from_masters_2_wready,
       fabric$v_from_masters_2_wvalid,
       fabric$v_to_slaves_0_arready,
       fabric$v_to_slaves_0_arvalid,
       fabric$v_to_slaves_0_awready,
       fabric$v_to_slaves_0_awvalid,
       fabric$v_to_slaves_0_bready,
       fabric$v_to_slaves_0_bvalid,
       fabric$v_to_slaves_0_rready,
       fabric$v_to_slaves_0_rvalid,
       fabric$v_to_slaves_0_wready,
       fabric$v_to_slaves_0_wvalid,
       fabric$v_to_slaves_1_arready,
       fabric$v_to_slaves_1_arvalid,
       fabric$v_to_slaves_1_awready,
       fabric$v_to_slaves_1_awvalid,
       fabric$v_to_slaves_1_bready,
       fabric$v_to_slaves_1_bvalid,
       fabric$v_to_slaves_1_rready,
       fabric$v_to_slaves_1_rvalid,
       fabric$v_to_slaves_1_wready,
       fabric$v_to_slaves_1_wvalid,
       fabric$v_to_slaves_2_arready,
       fabric$v_to_slaves_2_arvalid,
       fabric$v_to_slaves_2_awready,
       fabric$v_to_slaves_2_awvalid,
       fabric$v_to_slaves_2_bready,
       fabric$v_to_slaves_2_bvalid,
       fabric$v_to_slaves_2_rready,
       fabric$v_to_slaves_2_rvalid,
       fabric$v_to_slaves_2_wready,
       fabric$v_to_slaves_2_wvalid,
       fabric$v_to_slaves_3_arready,
       fabric$v_to_slaves_3_arvalid,
       fabric$v_to_slaves_3_awready,
       fabric$v_to_slaves_3_awvalid,
       fabric$v_to_slaves_3_bready,
       fabric$v_to_slaves_3_bvalid,
       fabric$v_to_slaves_3_rready,
       fabric$v_to_slaves_3_rvalid,
       fabric$v_to_slaves_3_wready,
       fabric$v_to_slaves_3_wvalid,
       fabric$v_to_slaves_4_arready,
       fabric$v_to_slaves_4_arvalid,
       fabric$v_to_slaves_4_awready,
       fabric$v_to_slaves_4_awvalid,
       fabric$v_to_slaves_4_bready,
       fabric$v_to_slaves_4_bvalid,
       fabric$v_to_slaves_4_rready,
       fabric$v_to_slaves_4_rvalid,
       fabric$v_to_slaves_4_wready,
       fabric$v_to_slaves_4_wvalid;

  // ports of submodule mem0_controller
  wire [352 : 0] mem0_controller$to_raw_mem_request_get;
  wire [255 : 0] mem0_controller$to_raw_mem_response_put;
  wire [63 : 0] mem0_controller$set_addr_map_addr_base,
		mem0_controller$set_addr_map_addr_lim,
		mem0_controller$slave_araddr,
		mem0_controller$slave_awaddr,
		mem0_controller$slave_rdata,
		mem0_controller$slave_wdata;
  wire [7 : 0] mem0_controller$slave_wstrb;
  wire [2 : 0] mem0_controller$slave_arprot, mem0_controller$slave_awprot;
  wire [1 : 0] mem0_controller$slave_bresp, mem0_controller$slave_rresp;
  wire mem0_controller$EN_server_reset_request_put,
       mem0_controller$EN_server_reset_response_get,
       mem0_controller$EN_set_addr_map,
       mem0_controller$EN_to_raw_mem_request_get,
       mem0_controller$EN_to_raw_mem_response_put,
       mem0_controller$RDY_server_reset_request_put,
       mem0_controller$RDY_server_reset_response_get,
       mem0_controller$RDY_set_addr_map,
       mem0_controller$RDY_to_raw_mem_request_get,
       mem0_controller$RDY_to_raw_mem_response_put,
       mem0_controller$slave_arready,
       mem0_controller$slave_arvalid,
       mem0_controller$slave_awready,
       mem0_controller$slave_awvalid,
       mem0_controller$slave_bready,
       mem0_controller$slave_bvalid,
       mem0_controller$slave_rready,
       mem0_controller$slave_rvalid,
       mem0_controller$slave_wready,
       mem0_controller$slave_wvalid;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_boot_rom_addr_base,
		soc_map$m_boot_rom_addr_lim,
		soc_map$m_is_IO_addr_addr,
		soc_map$m_mem0_controller_addr_base,
		soc_map$m_mem0_controller_addr_lim,
		soc_map$m_timer0_addr_base,
		soc_map$m_timer0_addr_lim,
		soc_map$m_uart0_addr_base,
		soc_map$m_uart0_addr_lim;

  // ports of submodule timer0
  wire [63 : 0] timer0$set_addr_map_addr_base,
		timer0$set_addr_map_addr_lim,
		timer0$slave_araddr,
		timer0$slave_awaddr,
		timer0$slave_rdata,
		timer0$slave_wdata;
  wire [7 : 0] timer0$slave_wstrb;
  wire [2 : 0] timer0$slave_arprot, timer0$slave_awprot;
  wire [1 : 0] timer0$slave_bresp, timer0$slave_rresp;
  wire timer0$EN_get_sw_interrupt_req_get,
       timer0$EN_get_timer_interrupt_req_get,
       timer0$EN_server_reset_request_put,
       timer0$EN_server_reset_response_get,
       timer0$EN_set_addr_map,
       timer0$RDY_get_sw_interrupt_req_get,
       timer0$RDY_get_timer_interrupt_req_get,
       timer0$RDY_server_reset_request_put,
       timer0$RDY_server_reset_response_get,
       timer0$get_sw_interrupt_req_get,
       timer0$get_timer_interrupt_req_get,
       timer0$slave_arready,
       timer0$slave_arvalid,
       timer0$slave_awready,
       timer0$slave_awvalid,
       timer0$slave_bready,
       timer0$slave_bvalid,
       timer0$slave_rready,
       timer0$slave_rvalid,
       timer0$slave_wready,
       timer0$slave_wvalid;

  // ports of submodule uart0
  wire [63 : 0] uart0$set_addr_map_addr_base,
		uart0$set_addr_map_addr_lim,
		uart0$slave_araddr,
		uart0$slave_awaddr,
		uart0$slave_rdata,
		uart0$slave_wdata;
  wire [7 : 0] uart0$get_to_console_get,
	       uart0$put_from_console_put,
	       uart0$slave_wstrb;
  wire [2 : 0] uart0$slave_arprot, uart0$slave_awprot;
  wire [1 : 0] uart0$slave_bresp, uart0$slave_rresp;
  wire uart0$EN_get_to_console_get,
       uart0$EN_put_from_console_put,
       uart0$EN_server_reset_request_put,
       uart0$EN_server_reset_response_get,
       uart0$EN_set_addr_map,
       uart0$RDY_get_to_console_get,
       uart0$RDY_put_from_console_put,
       uart0$RDY_server_reset_request_put,
       uart0$RDY_server_reset_response_get,
       uart0$slave_arready,
       uart0$slave_arvalid,
       uart0$slave_awready,
       uart0$slave_awvalid,
       uart0$slave_bready,
       uart0$slave_bvalid,
       uart0$slave_rready,
       uart0$slave_rvalid,
       uart0$slave_wready,
       uart0$slave_wvalid;

  // rule scheduling signals
  wire CAN_FIRE_RL_rl_connect_software_interrupt_request,
       CAN_FIRE_RL_rl_connect_timer_interrupt_request,
       CAN_FIRE_RL_rl_rd_addr_channel,
       CAN_FIRE_RL_rl_rd_addr_channel_1,
       CAN_FIRE_RL_rl_rd_addr_channel_2,
       CAN_FIRE_RL_rl_rd_addr_channel_3,
       CAN_FIRE_RL_rl_rd_addr_channel_4,
       CAN_FIRE_RL_rl_rd_addr_channel_5,
       CAN_FIRE_RL_rl_rd_addr_channel_6,
       CAN_FIRE_RL_rl_rd_addr_channel_7,
       CAN_FIRE_RL_rl_rd_data_channel,
       CAN_FIRE_RL_rl_rd_data_channel_1,
       CAN_FIRE_RL_rl_rd_data_channel_2,
       CAN_FIRE_RL_rl_rd_data_channel_3,
       CAN_FIRE_RL_rl_rd_data_channel_4,
       CAN_FIRE_RL_rl_rd_data_channel_5,
       CAN_FIRE_RL_rl_rd_data_channel_6,
       CAN_FIRE_RL_rl_rd_data_channel_7,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_start_2,
       CAN_FIRE_RL_rl_wr_addr_channel,
       CAN_FIRE_RL_rl_wr_addr_channel_1,
       CAN_FIRE_RL_rl_wr_addr_channel_2,
       CAN_FIRE_RL_rl_wr_addr_channel_3,
       CAN_FIRE_RL_rl_wr_addr_channel_4,
       CAN_FIRE_RL_rl_wr_addr_channel_5,
       CAN_FIRE_RL_rl_wr_addr_channel_6,
       CAN_FIRE_RL_rl_wr_addr_channel_7,
       CAN_FIRE_RL_rl_wr_data_channel,
       CAN_FIRE_RL_rl_wr_data_channel_1,
       CAN_FIRE_RL_rl_wr_data_channel_2,
       CAN_FIRE_RL_rl_wr_data_channel_3,
       CAN_FIRE_RL_rl_wr_data_channel_4,
       CAN_FIRE_RL_rl_wr_data_channel_5,
       CAN_FIRE_RL_rl_wr_data_channel_6,
       CAN_FIRE_RL_rl_wr_data_channel_7,
       CAN_FIRE_RL_rl_wr_response_channel,
       CAN_FIRE_RL_rl_wr_response_channel_1,
       CAN_FIRE_RL_rl_wr_response_channel_2,
       CAN_FIRE_RL_rl_wr_response_channel_3,
       CAN_FIRE_RL_rl_wr_response_channel_4,
       CAN_FIRE_RL_rl_wr_response_channel_5,
       CAN_FIRE_RL_rl_wr_response_channel_6,
       CAN_FIRE_RL_rl_wr_response_channel_7,
       CAN_FIRE_get_to_console_get,
       CAN_FIRE_put_from_console_put,
       CAN_FIRE_to_raw_mem_request_get,
       CAN_FIRE_to_raw_mem_response_put,
       WILL_FIRE_RL_rl_connect_software_interrupt_request,
       WILL_FIRE_RL_rl_connect_timer_interrupt_request,
       WILL_FIRE_RL_rl_rd_addr_channel,
       WILL_FIRE_RL_rl_rd_addr_channel_1,
       WILL_FIRE_RL_rl_rd_addr_channel_2,
       WILL_FIRE_RL_rl_rd_addr_channel_3,
       WILL_FIRE_RL_rl_rd_addr_channel_4,
       WILL_FIRE_RL_rl_rd_addr_channel_5,
       WILL_FIRE_RL_rl_rd_addr_channel_6,
       WILL_FIRE_RL_rl_rd_addr_channel_7,
       WILL_FIRE_RL_rl_rd_data_channel,
       WILL_FIRE_RL_rl_rd_data_channel_1,
       WILL_FIRE_RL_rl_rd_data_channel_2,
       WILL_FIRE_RL_rl_rd_data_channel_3,
       WILL_FIRE_RL_rl_rd_data_channel_4,
       WILL_FIRE_RL_rl_rd_data_channel_5,
       WILL_FIRE_RL_rl_rd_data_channel_6,
       WILL_FIRE_RL_rl_rd_data_channel_7,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_start_2,
       WILL_FIRE_RL_rl_wr_addr_channel,
       WILL_FIRE_RL_rl_wr_addr_channel_1,
       WILL_FIRE_RL_rl_wr_addr_channel_2,
       WILL_FIRE_RL_rl_wr_addr_channel_3,
       WILL_FIRE_RL_rl_wr_addr_channel_4,
       WILL_FIRE_RL_rl_wr_addr_channel_5,
       WILL_FIRE_RL_rl_wr_addr_channel_6,
       WILL_FIRE_RL_rl_wr_addr_channel_7,
       WILL_FIRE_RL_rl_wr_data_channel,
       WILL_FIRE_RL_rl_wr_data_channel_1,
       WILL_FIRE_RL_rl_wr_data_channel_2,
       WILL_FIRE_RL_rl_wr_data_channel_3,
       WILL_FIRE_RL_rl_wr_data_channel_4,
       WILL_FIRE_RL_rl_wr_data_channel_5,
       WILL_FIRE_RL_rl_wr_data_channel_6,
       WILL_FIRE_RL_rl_wr_data_channel_7,
       WILL_FIRE_RL_rl_wr_response_channel,
       WILL_FIRE_RL_rl_wr_response_channel_1,
       WILL_FIRE_RL_rl_wr_response_channel_2,
       WILL_FIRE_RL_rl_wr_response_channel_3,
       WILL_FIRE_RL_rl_wr_response_channel_4,
       WILL_FIRE_RL_rl_wr_response_channel_5,
       WILL_FIRE_RL_rl_wr_response_channel_6,
       WILL_FIRE_RL_rl_wr_response_channel_7,
       WILL_FIRE_get_to_console_get,
       WILL_FIRE_put_from_console_put,
       WILL_FIRE_to_raw_mem_request_get,
       WILL_FIRE_to_raw_mem_response_put;

  // inputs to muxes for submodule ports
  wire MUX_rg_state$write_1__SEL_1, MUX_rg_state$write_1__SEL_2;

  // actionvalue method to_raw_mem_request_get
  assign to_raw_mem_request_get = mem0_controller$to_raw_mem_request_get ;
  assign RDY_to_raw_mem_request_get =
	     mem0_controller$RDY_to_raw_mem_request_get ;
  assign CAN_FIRE_to_raw_mem_request_get =
	     mem0_controller$RDY_to_raw_mem_request_get ;
  assign WILL_FIRE_to_raw_mem_request_get = EN_to_raw_mem_request_get ;

  // action method to_raw_mem_response_put
  assign RDY_to_raw_mem_response_put =
	     mem0_controller$RDY_to_raw_mem_response_put ;
  assign CAN_FIRE_to_raw_mem_response_put =
	     mem0_controller$RDY_to_raw_mem_response_put ;
  assign WILL_FIRE_to_raw_mem_response_put = EN_to_raw_mem_response_put ;

  // actionvalue method get_to_console_get
  assign get_to_console_get = uart0$get_to_console_get ;
  assign RDY_get_to_console_get = uart0$RDY_get_to_console_get ;
  assign CAN_FIRE_get_to_console_get = uart0$RDY_get_to_console_get ;
  assign WILL_FIRE_get_to_console_get = EN_get_to_console_get ;

  // action method put_from_console_put
  assign RDY_put_from_console_put = uart0$RDY_put_from_console_put ;
  assign CAN_FIRE_put_from_console_put = uart0$RDY_put_from_console_put ;
  assign WILL_FIRE_put_from_console_put = EN_put_from_console_put ;

  // submodule boot_rom
  mkBoot_ROM boot_rom(.CLK(CLK),
		      .RST_N(RST_N),
		      .set_addr_map_addr_base(boot_rom$set_addr_map_addr_base),
		      .set_addr_map_addr_lim(boot_rom$set_addr_map_addr_lim),
		      .slave_araddr(boot_rom$slave_araddr),
		      .slave_arprot(boot_rom$slave_arprot),
		      .slave_arvalid(boot_rom$slave_arvalid),
		      .slave_awaddr(boot_rom$slave_awaddr),
		      .slave_awprot(boot_rom$slave_awprot),
		      .slave_awvalid(boot_rom$slave_awvalid),
		      .slave_bready(boot_rom$slave_bready),
		      .slave_rready(boot_rom$slave_rready),
		      .slave_wdata(boot_rom$slave_wdata),
		      .slave_wstrb(boot_rom$slave_wstrb),
		      .slave_wvalid(boot_rom$slave_wvalid),
		      .EN_set_addr_map(boot_rom$EN_set_addr_map),
		      .RDY_set_addr_map(),
		      .slave_awready(boot_rom$slave_awready),
		      .slave_wready(boot_rom$slave_wready),
		      .slave_bvalid(boot_rom$slave_bvalid),
		      .slave_bresp(boot_rom$slave_bresp),
		      .slave_arready(boot_rom$slave_arready),
		      .slave_rvalid(boot_rom$slave_rvalid),
		      .slave_rresp(boot_rom$slave_rresp),
		      .slave_rdata(boot_rom$slave_rdata));

  // submodule brvf_core
  mkBRVF_Core #(.pc_reset_value(64'h0000000000001000)) brvf_core(.CLK(CLK),
								 .RST_N(RST_N),
								 .cpu_dmem_master_arready(brvf_core$cpu_dmem_master_arready),
								 .cpu_dmem_master_awready(brvf_core$cpu_dmem_master_awready),
								 .cpu_dmem_master_bresp(brvf_core$cpu_dmem_master_bresp),
								 .cpu_dmem_master_bvalid(brvf_core$cpu_dmem_master_bvalid),
								 .cpu_dmem_master_rdata(brvf_core$cpu_dmem_master_rdata),
								 .cpu_dmem_master_rresp(brvf_core$cpu_dmem_master_rresp),
								 .cpu_dmem_master_rvalid(brvf_core$cpu_dmem_master_rvalid),
								 .cpu_dmem_master_wready(brvf_core$cpu_dmem_master_wready),
								 .cpu_external_interrupt_req_set_not_clear(brvf_core$cpu_external_interrupt_req_set_not_clear),
								 .cpu_imem_master_arready(brvf_core$cpu_imem_master_arready),
								 .cpu_imem_master_awready(brvf_core$cpu_imem_master_awready),
								 .cpu_imem_master_bresp(brvf_core$cpu_imem_master_bresp),
								 .cpu_imem_master_bvalid(brvf_core$cpu_imem_master_bvalid),
								 .cpu_imem_master_rdata(brvf_core$cpu_imem_master_rdata),
								 .cpu_imem_master_rresp(brvf_core$cpu_imem_master_rresp),
								 .cpu_imem_master_rvalid(brvf_core$cpu_imem_master_rvalid),
								 .cpu_imem_master_wready(brvf_core$cpu_imem_master_wready),
								 .cpu_slave_araddr(brvf_core$cpu_slave_araddr),
								 .cpu_slave_arprot(brvf_core$cpu_slave_arprot),
								 .cpu_slave_arvalid(brvf_core$cpu_slave_arvalid),
								 .cpu_slave_awaddr(brvf_core$cpu_slave_awaddr),
								 .cpu_slave_awprot(brvf_core$cpu_slave_awprot),
								 .cpu_slave_awvalid(brvf_core$cpu_slave_awvalid),
								 .cpu_slave_bready(brvf_core$cpu_slave_bready),
								 .cpu_slave_rready(brvf_core$cpu_slave_rready),
								 .cpu_slave_wdata(brvf_core$cpu_slave_wdata),
								 .cpu_slave_wstrb(brvf_core$cpu_slave_wstrb),
								 .cpu_slave_wvalid(brvf_core$cpu_slave_wvalid),
								 .cpu_software_interrupt_req_set_not_clear(brvf_core$cpu_software_interrupt_req_set_not_clear),
								 .cpu_timer_interrupt_req_set_not_clear(brvf_core$cpu_timer_interrupt_req_set_not_clear),
								 .EN_cpu_reset_server_request_put(brvf_core$EN_cpu_reset_server_request_put),
								 .EN_cpu_reset_server_response_get(brvf_core$EN_cpu_reset_server_response_get),
								 .EN_cpu_external_interrupt_req(brvf_core$EN_cpu_external_interrupt_req),
								 .EN_cpu_timer_interrupt_req(brvf_core$EN_cpu_timer_interrupt_req),
								 .EN_cpu_software_interrupt_req(brvf_core$EN_cpu_software_interrupt_req),
								 .RDY_cpu_reset_server_request_put(brvf_core$RDY_cpu_reset_server_request_put),
								 .RDY_cpu_reset_server_response_get(brvf_core$RDY_cpu_reset_server_response_get),
								 .cpu_imem_master_awvalid(brvf_core$cpu_imem_master_awvalid),
								 .cpu_imem_master_awaddr(brvf_core$cpu_imem_master_awaddr),
								 .cpu_imem_master_awprot(brvf_core$cpu_imem_master_awprot),
								 .cpu_imem_master_wvalid(brvf_core$cpu_imem_master_wvalid),
								 .cpu_imem_master_wdata(brvf_core$cpu_imem_master_wdata),
								 .cpu_imem_master_wstrb(brvf_core$cpu_imem_master_wstrb),
								 .cpu_imem_master_bready(brvf_core$cpu_imem_master_bready),
								 .cpu_imem_master_arvalid(brvf_core$cpu_imem_master_arvalid),
								 .cpu_imem_master_araddr(brvf_core$cpu_imem_master_araddr),
								 .cpu_imem_master_arprot(brvf_core$cpu_imem_master_arprot),
								 .cpu_imem_master_rready(brvf_core$cpu_imem_master_rready),
								 .cpu_dmem_master_awvalid(brvf_core$cpu_dmem_master_awvalid),
								 .cpu_dmem_master_awaddr(brvf_core$cpu_dmem_master_awaddr),
								 .cpu_dmem_master_awprot(brvf_core$cpu_dmem_master_awprot),
								 .cpu_dmem_master_wvalid(brvf_core$cpu_dmem_master_wvalid),
								 .cpu_dmem_master_wdata(brvf_core$cpu_dmem_master_wdata),
								 .cpu_dmem_master_wstrb(brvf_core$cpu_dmem_master_wstrb),
								 .cpu_dmem_master_bready(brvf_core$cpu_dmem_master_bready),
								 .cpu_dmem_master_arvalid(brvf_core$cpu_dmem_master_arvalid),
								 .cpu_dmem_master_araddr(brvf_core$cpu_dmem_master_araddr),
								 .cpu_dmem_master_arprot(brvf_core$cpu_dmem_master_arprot),
								 .cpu_dmem_master_rready(brvf_core$cpu_dmem_master_rready),
								 .cpu_slave_awready(brvf_core$cpu_slave_awready),
								 .cpu_slave_wready(brvf_core$cpu_slave_wready),
								 .cpu_slave_bvalid(brvf_core$cpu_slave_bvalid),
								 .cpu_slave_bresp(brvf_core$cpu_slave_bresp),
								 .cpu_slave_arready(brvf_core$cpu_slave_arready),
								 .cpu_slave_rvalid(brvf_core$cpu_slave_rvalid),
								 .cpu_slave_rresp(brvf_core$cpu_slave_rresp),
								 .cpu_slave_rdata(brvf_core$cpu_slave_rdata),
								 .RDY_cpu_external_interrupt_req(),
								 .RDY_cpu_timer_interrupt_req(brvf_core$RDY_cpu_timer_interrupt_req),
								 .RDY_cpu_software_interrupt_req(brvf_core$RDY_cpu_software_interrupt_req));

  // submodule fabric
  mkFabric fabric(.CLK(CLK),
		  .RST_N(RST_N),
		  .set_verbosity_verbosity(fabric$set_verbosity_verbosity),
		  .v_from_masters_0_araddr(fabric$v_from_masters_0_araddr),
		  .v_from_masters_0_arprot(fabric$v_from_masters_0_arprot),
		  .v_from_masters_0_arvalid(fabric$v_from_masters_0_arvalid),
		  .v_from_masters_0_awaddr(fabric$v_from_masters_0_awaddr),
		  .v_from_masters_0_awprot(fabric$v_from_masters_0_awprot),
		  .v_from_masters_0_awvalid(fabric$v_from_masters_0_awvalid),
		  .v_from_masters_0_bready(fabric$v_from_masters_0_bready),
		  .v_from_masters_0_rready(fabric$v_from_masters_0_rready),
		  .v_from_masters_0_wdata(fabric$v_from_masters_0_wdata),
		  .v_from_masters_0_wstrb(fabric$v_from_masters_0_wstrb),
		  .v_from_masters_0_wvalid(fabric$v_from_masters_0_wvalid),
		  .v_from_masters_1_araddr(fabric$v_from_masters_1_araddr),
		  .v_from_masters_1_arprot(fabric$v_from_masters_1_arprot),
		  .v_from_masters_1_arvalid(fabric$v_from_masters_1_arvalid),
		  .v_from_masters_1_awaddr(fabric$v_from_masters_1_awaddr),
		  .v_from_masters_1_awprot(fabric$v_from_masters_1_awprot),
		  .v_from_masters_1_awvalid(fabric$v_from_masters_1_awvalid),
		  .v_from_masters_1_bready(fabric$v_from_masters_1_bready),
		  .v_from_masters_1_rready(fabric$v_from_masters_1_rready),
		  .v_from_masters_1_wdata(fabric$v_from_masters_1_wdata),
		  .v_from_masters_1_wstrb(fabric$v_from_masters_1_wstrb),
		  .v_from_masters_1_wvalid(fabric$v_from_masters_1_wvalid),
		  .v_from_masters_2_araddr(fabric$v_from_masters_2_araddr),
		  .v_from_masters_2_arprot(fabric$v_from_masters_2_arprot),
		  .v_from_masters_2_arvalid(fabric$v_from_masters_2_arvalid),
		  .v_from_masters_2_awaddr(fabric$v_from_masters_2_awaddr),
		  .v_from_masters_2_awprot(fabric$v_from_masters_2_awprot),
		  .v_from_masters_2_awvalid(fabric$v_from_masters_2_awvalid),
		  .v_from_masters_2_bready(fabric$v_from_masters_2_bready),
		  .v_from_masters_2_rready(fabric$v_from_masters_2_rready),
		  .v_from_masters_2_wdata(fabric$v_from_masters_2_wdata),
		  .v_from_masters_2_wstrb(fabric$v_from_masters_2_wstrb),
		  .v_from_masters_2_wvalid(fabric$v_from_masters_2_wvalid),
		  .v_to_slaves_0_arready(fabric$v_to_slaves_0_arready),
		  .v_to_slaves_0_awready(fabric$v_to_slaves_0_awready),
		  .v_to_slaves_0_bresp(fabric$v_to_slaves_0_bresp),
		  .v_to_slaves_0_bvalid(fabric$v_to_slaves_0_bvalid),
		  .v_to_slaves_0_rdata(fabric$v_to_slaves_0_rdata),
		  .v_to_slaves_0_rresp(fabric$v_to_slaves_0_rresp),
		  .v_to_slaves_0_rvalid(fabric$v_to_slaves_0_rvalid),
		  .v_to_slaves_0_wready(fabric$v_to_slaves_0_wready),
		  .v_to_slaves_1_arready(fabric$v_to_slaves_1_arready),
		  .v_to_slaves_1_awready(fabric$v_to_slaves_1_awready),
		  .v_to_slaves_1_bresp(fabric$v_to_slaves_1_bresp),
		  .v_to_slaves_1_bvalid(fabric$v_to_slaves_1_bvalid),
		  .v_to_slaves_1_rdata(fabric$v_to_slaves_1_rdata),
		  .v_to_slaves_1_rresp(fabric$v_to_slaves_1_rresp),
		  .v_to_slaves_1_rvalid(fabric$v_to_slaves_1_rvalid),
		  .v_to_slaves_1_wready(fabric$v_to_slaves_1_wready),
		  .v_to_slaves_2_arready(fabric$v_to_slaves_2_arready),
		  .v_to_slaves_2_awready(fabric$v_to_slaves_2_awready),
		  .v_to_slaves_2_bresp(fabric$v_to_slaves_2_bresp),
		  .v_to_slaves_2_bvalid(fabric$v_to_slaves_2_bvalid),
		  .v_to_slaves_2_rdata(fabric$v_to_slaves_2_rdata),
		  .v_to_slaves_2_rresp(fabric$v_to_slaves_2_rresp),
		  .v_to_slaves_2_rvalid(fabric$v_to_slaves_2_rvalid),
		  .v_to_slaves_2_wready(fabric$v_to_slaves_2_wready),
		  .v_to_slaves_3_arready(fabric$v_to_slaves_3_arready),
		  .v_to_slaves_3_awready(fabric$v_to_slaves_3_awready),
		  .v_to_slaves_3_bresp(fabric$v_to_slaves_3_bresp),
		  .v_to_slaves_3_bvalid(fabric$v_to_slaves_3_bvalid),
		  .v_to_slaves_3_rdata(fabric$v_to_slaves_3_rdata),
		  .v_to_slaves_3_rresp(fabric$v_to_slaves_3_rresp),
		  .v_to_slaves_3_rvalid(fabric$v_to_slaves_3_rvalid),
		  .v_to_slaves_3_wready(fabric$v_to_slaves_3_wready),
		  .v_to_slaves_4_arready(fabric$v_to_slaves_4_arready),
		  .v_to_slaves_4_awready(fabric$v_to_slaves_4_awready),
		  .v_to_slaves_4_bresp(fabric$v_to_slaves_4_bresp),
		  .v_to_slaves_4_bvalid(fabric$v_to_slaves_4_bvalid),
		  .v_to_slaves_4_rdata(fabric$v_to_slaves_4_rdata),
		  .v_to_slaves_4_rresp(fabric$v_to_slaves_4_rresp),
		  .v_to_slaves_4_rvalid(fabric$v_to_slaves_4_rvalid),
		  .v_to_slaves_4_wready(fabric$v_to_slaves_4_wready),
		  .EN_reset(fabric$EN_reset),
		  .EN_set_verbosity(fabric$EN_set_verbosity),
		  .RDY_reset(),
		  .RDY_set_verbosity(),
		  .v_from_masters_0_awready(),
		  .v_from_masters_0_wready(),
		  .v_from_masters_0_bvalid(),
		  .v_from_masters_0_bresp(),
		  .v_from_masters_0_arready(),
		  .v_from_masters_0_rvalid(),
		  .v_from_masters_0_rresp(),
		  .v_from_masters_0_rdata(),
		  .v_from_masters_1_awready(fabric$v_from_masters_1_awready),
		  .v_from_masters_1_wready(fabric$v_from_masters_1_wready),
		  .v_from_masters_1_bvalid(fabric$v_from_masters_1_bvalid),
		  .v_from_masters_1_bresp(fabric$v_from_masters_1_bresp),
		  .v_from_masters_1_arready(fabric$v_from_masters_1_arready),
		  .v_from_masters_1_rvalid(fabric$v_from_masters_1_rvalid),
		  .v_from_masters_1_rresp(fabric$v_from_masters_1_rresp),
		  .v_from_masters_1_rdata(fabric$v_from_masters_1_rdata),
		  .v_from_masters_2_awready(fabric$v_from_masters_2_awready),
		  .v_from_masters_2_wready(fabric$v_from_masters_2_wready),
		  .v_from_masters_2_bvalid(fabric$v_from_masters_2_bvalid),
		  .v_from_masters_2_bresp(fabric$v_from_masters_2_bresp),
		  .v_from_masters_2_arready(fabric$v_from_masters_2_arready),
		  .v_from_masters_2_rvalid(fabric$v_from_masters_2_rvalid),
		  .v_from_masters_2_rresp(fabric$v_from_masters_2_rresp),
		  .v_from_masters_2_rdata(fabric$v_from_masters_2_rdata),
		  .v_to_slaves_0_awvalid(fabric$v_to_slaves_0_awvalid),
		  .v_to_slaves_0_awaddr(fabric$v_to_slaves_0_awaddr),
		  .v_to_slaves_0_awprot(fabric$v_to_slaves_0_awprot),
		  .v_to_slaves_0_wvalid(fabric$v_to_slaves_0_wvalid),
		  .v_to_slaves_0_wdata(fabric$v_to_slaves_0_wdata),
		  .v_to_slaves_0_wstrb(fabric$v_to_slaves_0_wstrb),
		  .v_to_slaves_0_bready(fabric$v_to_slaves_0_bready),
		  .v_to_slaves_0_arvalid(fabric$v_to_slaves_0_arvalid),
		  .v_to_slaves_0_araddr(fabric$v_to_slaves_0_araddr),
		  .v_to_slaves_0_arprot(fabric$v_to_slaves_0_arprot),
		  .v_to_slaves_0_rready(fabric$v_to_slaves_0_rready),
		  .v_to_slaves_1_awvalid(fabric$v_to_slaves_1_awvalid),
		  .v_to_slaves_1_awaddr(fabric$v_to_slaves_1_awaddr),
		  .v_to_slaves_1_awprot(fabric$v_to_slaves_1_awprot),
		  .v_to_slaves_1_wvalid(fabric$v_to_slaves_1_wvalid),
		  .v_to_slaves_1_wdata(fabric$v_to_slaves_1_wdata),
		  .v_to_slaves_1_wstrb(fabric$v_to_slaves_1_wstrb),
		  .v_to_slaves_1_bready(fabric$v_to_slaves_1_bready),
		  .v_to_slaves_1_arvalid(fabric$v_to_slaves_1_arvalid),
		  .v_to_slaves_1_araddr(fabric$v_to_slaves_1_araddr),
		  .v_to_slaves_1_arprot(fabric$v_to_slaves_1_arprot),
		  .v_to_slaves_1_rready(fabric$v_to_slaves_1_rready),
		  .v_to_slaves_2_awvalid(fabric$v_to_slaves_2_awvalid),
		  .v_to_slaves_2_awaddr(fabric$v_to_slaves_2_awaddr),
		  .v_to_slaves_2_awprot(fabric$v_to_slaves_2_awprot),
		  .v_to_slaves_2_wvalid(fabric$v_to_slaves_2_wvalid),
		  .v_to_slaves_2_wdata(fabric$v_to_slaves_2_wdata),
		  .v_to_slaves_2_wstrb(fabric$v_to_slaves_2_wstrb),
		  .v_to_slaves_2_bready(fabric$v_to_slaves_2_bready),
		  .v_to_slaves_2_arvalid(fabric$v_to_slaves_2_arvalid),
		  .v_to_slaves_2_araddr(fabric$v_to_slaves_2_araddr),
		  .v_to_slaves_2_arprot(fabric$v_to_slaves_2_arprot),
		  .v_to_slaves_2_rready(fabric$v_to_slaves_2_rready),
		  .v_to_slaves_3_awvalid(fabric$v_to_slaves_3_awvalid),
		  .v_to_slaves_3_awaddr(fabric$v_to_slaves_3_awaddr),
		  .v_to_slaves_3_awprot(fabric$v_to_slaves_3_awprot),
		  .v_to_slaves_3_wvalid(fabric$v_to_slaves_3_wvalid),
		  .v_to_slaves_3_wdata(fabric$v_to_slaves_3_wdata),
		  .v_to_slaves_3_wstrb(fabric$v_to_slaves_3_wstrb),
		  .v_to_slaves_3_bready(fabric$v_to_slaves_3_bready),
		  .v_to_slaves_3_arvalid(fabric$v_to_slaves_3_arvalid),
		  .v_to_slaves_3_araddr(fabric$v_to_slaves_3_araddr),
		  .v_to_slaves_3_arprot(fabric$v_to_slaves_3_arprot),
		  .v_to_slaves_3_rready(fabric$v_to_slaves_3_rready),
		  .v_to_slaves_4_awvalid(fabric$v_to_slaves_4_awvalid),
		  .v_to_slaves_4_awaddr(fabric$v_to_slaves_4_awaddr),
		  .v_to_slaves_4_awprot(fabric$v_to_slaves_4_awprot),
		  .v_to_slaves_4_wvalid(fabric$v_to_slaves_4_wvalid),
		  .v_to_slaves_4_wdata(fabric$v_to_slaves_4_wdata),
		  .v_to_slaves_4_wstrb(fabric$v_to_slaves_4_wstrb),
		  .v_to_slaves_4_bready(fabric$v_to_slaves_4_bready),
		  .v_to_slaves_4_arvalid(fabric$v_to_slaves_4_arvalid),
		  .v_to_slaves_4_araddr(fabric$v_to_slaves_4_araddr),
		  .v_to_slaves_4_arprot(fabric$v_to_slaves_4_arprot),
		  .v_to_slaves_4_rready(fabric$v_to_slaves_4_rready));

  // submodule mem0_controller
  mkMem_Controller mem0_controller(.CLK(CLK),
				   .RST_N(RST_N),
				   .set_addr_map_addr_base(mem0_controller$set_addr_map_addr_base),
				   .set_addr_map_addr_lim(mem0_controller$set_addr_map_addr_lim),
				   .slave_araddr(mem0_controller$slave_araddr),
				   .slave_arprot(mem0_controller$slave_arprot),
				   .slave_arvalid(mem0_controller$slave_arvalid),
				   .slave_awaddr(mem0_controller$slave_awaddr),
				   .slave_awprot(mem0_controller$slave_awprot),
				   .slave_awvalid(mem0_controller$slave_awvalid),
				   .slave_bready(mem0_controller$slave_bready),
				   .slave_rready(mem0_controller$slave_rready),
				   .slave_wdata(mem0_controller$slave_wdata),
				   .slave_wstrb(mem0_controller$slave_wstrb),
				   .slave_wvalid(mem0_controller$slave_wvalid),
				   .to_raw_mem_response_put(mem0_controller$to_raw_mem_response_put),
				   .EN_server_reset_request_put(mem0_controller$EN_server_reset_request_put),
				   .EN_server_reset_response_get(mem0_controller$EN_server_reset_response_get),
				   .EN_set_addr_map(mem0_controller$EN_set_addr_map),
				   .EN_to_raw_mem_request_get(mem0_controller$EN_to_raw_mem_request_get),
				   .EN_to_raw_mem_response_put(mem0_controller$EN_to_raw_mem_response_put),
				   .RDY_server_reset_request_put(mem0_controller$RDY_server_reset_request_put),
				   .RDY_server_reset_response_get(mem0_controller$RDY_server_reset_response_get),
				   .RDY_set_addr_map(mem0_controller$RDY_set_addr_map),
				   .slave_awready(mem0_controller$slave_awready),
				   .slave_wready(mem0_controller$slave_wready),
				   .slave_bvalid(mem0_controller$slave_bvalid),
				   .slave_bresp(mem0_controller$slave_bresp),
				   .slave_arready(mem0_controller$slave_arready),
				   .slave_rvalid(mem0_controller$slave_rvalid),
				   .slave_rresp(mem0_controller$slave_rresp),
				   .slave_rdata(mem0_controller$slave_rdata),
				   .to_raw_mem_request_get(mem0_controller$to_raw_mem_request_get),
				   .RDY_to_raw_mem_request_get(mem0_controller$RDY_to_raw_mem_request_get),
				   .RDY_to_raw_mem_response_put(mem0_controller$RDY_to_raw_mem_response_put));

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_base(soc_map$m_boot_rom_addr_base),
		    .m_boot_rom_addr_lim(soc_map$m_boot_rom_addr_lim),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_lim(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_base(soc_map$m_mem0_controller_addr_base),
		    .m_mem0_controller_addr_lim(soc_map$m_mem0_controller_addr_lim),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_base(soc_map$m_uart0_addr_base),
		    .m_uart0_addr_lim(soc_map$m_uart0_addr_lim),
		    .m_timer0_addr_size(),
		    .m_timer0_addr_base(soc_map$m_timer0_addr_base),
		    .m_timer0_addr_lim(soc_map$m_timer0_addr_lim),
		    .m_is_IO_addr());

  // submodule timer0
  mkTimer timer0(.CLK(CLK),
		 .RST_N(RST_N),
		 .set_addr_map_addr_base(timer0$set_addr_map_addr_base),
		 .set_addr_map_addr_lim(timer0$set_addr_map_addr_lim),
		 .slave_araddr(timer0$slave_araddr),
		 .slave_arprot(timer0$slave_arprot),
		 .slave_arvalid(timer0$slave_arvalid),
		 .slave_awaddr(timer0$slave_awaddr),
		 .slave_awprot(timer0$slave_awprot),
		 .slave_awvalid(timer0$slave_awvalid),
		 .slave_bready(timer0$slave_bready),
		 .slave_rready(timer0$slave_rready),
		 .slave_wdata(timer0$slave_wdata),
		 .slave_wstrb(timer0$slave_wstrb),
		 .slave_wvalid(timer0$slave_wvalid),
		 .EN_server_reset_request_put(timer0$EN_server_reset_request_put),
		 .EN_server_reset_response_get(timer0$EN_server_reset_response_get),
		 .EN_set_addr_map(timer0$EN_set_addr_map),
		 .EN_get_timer_interrupt_req_get(timer0$EN_get_timer_interrupt_req_get),
		 .EN_get_sw_interrupt_req_get(timer0$EN_get_sw_interrupt_req_get),
		 .RDY_server_reset_request_put(timer0$RDY_server_reset_request_put),
		 .RDY_server_reset_response_get(timer0$RDY_server_reset_response_get),
		 .RDY_set_addr_map(),
		 .slave_awready(timer0$slave_awready),
		 .slave_wready(timer0$slave_wready),
		 .slave_bvalid(timer0$slave_bvalid),
		 .slave_bresp(timer0$slave_bresp),
		 .slave_arready(timer0$slave_arready),
		 .slave_rvalid(timer0$slave_rvalid),
		 .slave_rresp(timer0$slave_rresp),
		 .slave_rdata(timer0$slave_rdata),
		 .get_timer_interrupt_req_get(timer0$get_timer_interrupt_req_get),
		 .RDY_get_timer_interrupt_req_get(timer0$RDY_get_timer_interrupt_req_get),
		 .get_sw_interrupt_req_get(timer0$get_sw_interrupt_req_get),
		 .RDY_get_sw_interrupt_req_get(timer0$RDY_get_sw_interrupt_req_get));

  // submodule uart0
  mkUART uart0(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_from_console_put(uart0$put_from_console_put),
	       .set_addr_map_addr_base(uart0$set_addr_map_addr_base),
	       .set_addr_map_addr_lim(uart0$set_addr_map_addr_lim),
	       .slave_araddr(uart0$slave_araddr),
	       .slave_arprot(uart0$slave_arprot),
	       .slave_arvalid(uart0$slave_arvalid),
	       .slave_awaddr(uart0$slave_awaddr),
	       .slave_awprot(uart0$slave_awprot),
	       .slave_awvalid(uart0$slave_awvalid),
	       .slave_bready(uart0$slave_bready),
	       .slave_rready(uart0$slave_rready),
	       .slave_wdata(uart0$slave_wdata),
	       .slave_wstrb(uart0$slave_wstrb),
	       .slave_wvalid(uart0$slave_wvalid),
	       .EN_server_reset_request_put(uart0$EN_server_reset_request_put),
	       .EN_server_reset_response_get(uart0$EN_server_reset_response_get),
	       .EN_set_addr_map(uart0$EN_set_addr_map),
	       .EN_get_to_console_get(uart0$EN_get_to_console_get),
	       .EN_put_from_console_put(uart0$EN_put_from_console_put),
	       .RDY_server_reset_request_put(uart0$RDY_server_reset_request_put),
	       .RDY_server_reset_response_get(uart0$RDY_server_reset_response_get),
	       .RDY_set_addr_map(),
	       .slave_awready(uart0$slave_awready),
	       .slave_wready(uart0$slave_wready),
	       .slave_bvalid(uart0$slave_bvalid),
	       .slave_bresp(uart0$slave_bresp),
	       .slave_arready(uart0$slave_arready),
	       .slave_rvalid(uart0$slave_rvalid),
	       .slave_rresp(uart0$slave_rresp),
	       .slave_rdata(uart0$slave_rdata),
	       .get_to_console_get(uart0$get_to_console_get),
	       .RDY_get_to_console_get(uart0$RDY_get_to_console_get),
	       .RDY_put_from_console_put(uart0$RDY_put_from_console_put));

  // rule RL_rl_wr_addr_channel
  assign CAN_FIRE_RL_rl_wr_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel = 1'd1 ;

  // rule RL_rl_wr_data_channel
  assign CAN_FIRE_RL_rl_wr_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel = 1'd1 ;

  // rule RL_rl_rd_addr_channel
  assign CAN_FIRE_RL_rl_rd_addr_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel = 1'd1 ;

  // rule RL_rl_wr_response_channel
  assign CAN_FIRE_RL_rl_wr_response_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel = 1'd1 ;

  // rule RL_rl_wr_addr_channel_1
  assign CAN_FIRE_RL_rl_wr_addr_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_1 = 1'd1 ;

  // rule RL_rl_wr_data_channel_1
  assign CAN_FIRE_RL_rl_wr_data_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_1 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_1
  assign CAN_FIRE_RL_rl_rd_addr_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_1 = 1'd1 ;

  // rule RL_rl_rd_data_channel
  assign CAN_FIRE_RL_rl_rd_data_channel = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel = 1'd1 ;

  // rule RL_rl_wr_response_channel_1
  assign CAN_FIRE_RL_rl_wr_response_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_1 = 1'd1 ;

  // rule RL_rl_rd_data_channel_1
  assign CAN_FIRE_RL_rl_rd_data_channel_1 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_1 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_2
  assign CAN_FIRE_RL_rl_wr_addr_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_2 = 1'd1 ;

  // rule RL_rl_wr_data_channel_2
  assign CAN_FIRE_RL_rl_wr_data_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_2 = 1'd1 ;

  // rule RL_rl_wr_response_channel_2
  assign CAN_FIRE_RL_rl_wr_response_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_2 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_2
  assign CAN_FIRE_RL_rl_rd_addr_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_2 = 1'd1 ;

  // rule RL_rl_rd_data_channel_2
  assign CAN_FIRE_RL_rl_rd_data_channel_2 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_2 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_3
  assign CAN_FIRE_RL_rl_wr_addr_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_3 = 1'd1 ;

  // rule RL_rl_wr_data_channel_3
  assign CAN_FIRE_RL_rl_wr_data_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_3 = 1'd1 ;

  // rule RL_rl_wr_response_channel_3
  assign CAN_FIRE_RL_rl_wr_response_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_3 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_3
  assign CAN_FIRE_RL_rl_rd_addr_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_3 = 1'd1 ;

  // rule RL_rl_rd_data_channel_3
  assign CAN_FIRE_RL_rl_rd_data_channel_3 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_3 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_4
  assign CAN_FIRE_RL_rl_wr_addr_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_4 = 1'd1 ;

  // rule RL_rl_wr_data_channel_4
  assign CAN_FIRE_RL_rl_wr_data_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_4 = 1'd1 ;

  // rule RL_rl_wr_response_channel_4
  assign CAN_FIRE_RL_rl_wr_response_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_4 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_4
  assign CAN_FIRE_RL_rl_rd_addr_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_4 = 1'd1 ;

  // rule RL_rl_rd_data_channel_4
  assign CAN_FIRE_RL_rl_rd_data_channel_4 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_4 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_5
  assign CAN_FIRE_RL_rl_wr_addr_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_5 = 1'd1 ;

  // rule RL_rl_wr_data_channel_5
  assign CAN_FIRE_RL_rl_wr_data_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_5 = 1'd1 ;

  // rule RL_rl_wr_response_channel_5
  assign CAN_FIRE_RL_rl_wr_response_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_5 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_5
  assign CAN_FIRE_RL_rl_rd_addr_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_5 = 1'd1 ;

  // rule RL_rl_rd_data_channel_5
  assign CAN_FIRE_RL_rl_rd_data_channel_5 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_5 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_6
  assign CAN_FIRE_RL_rl_wr_addr_channel_6 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_6 = 1'd1 ;

  // rule RL_rl_wr_data_channel_6
  assign CAN_FIRE_RL_rl_wr_data_channel_6 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_6 = 1'd1 ;

  // rule RL_rl_wr_response_channel_6
  assign CAN_FIRE_RL_rl_wr_response_channel_6 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_6 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_6
  assign CAN_FIRE_RL_rl_rd_addr_channel_6 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_6 = 1'd1 ;

  // rule RL_rl_rd_data_channel_6
  assign CAN_FIRE_RL_rl_rd_data_channel_6 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_6 = 1'd1 ;

  // rule RL_rl_wr_addr_channel_7
  assign CAN_FIRE_RL_rl_wr_addr_channel_7 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_addr_channel_7 = 1'd1 ;

  // rule RL_rl_wr_data_channel_7
  assign CAN_FIRE_RL_rl_wr_data_channel_7 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_data_channel_7 = 1'd1 ;

  // rule RL_rl_wr_response_channel_7
  assign CAN_FIRE_RL_rl_wr_response_channel_7 = 1'd1 ;
  assign WILL_FIRE_RL_rl_wr_response_channel_7 = 1'd1 ;

  // rule RL_rl_rd_addr_channel_7
  assign CAN_FIRE_RL_rl_rd_addr_channel_7 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_addr_channel_7 = 1'd1 ;

  // rule RL_rl_rd_data_channel_7
  assign CAN_FIRE_RL_rl_rd_data_channel_7 = 1'd1 ;
  assign WILL_FIRE_RL_rl_rd_data_channel_7 = 1'd1 ;

  // rule RL_rl_connect_timer_interrupt_request
  assign CAN_FIRE_RL_rl_connect_timer_interrupt_request =
	     timer0$RDY_get_timer_interrupt_req_get &&
	     brvf_core$RDY_cpu_timer_interrupt_req ;
  assign WILL_FIRE_RL_rl_connect_timer_interrupt_request =
	     CAN_FIRE_RL_rl_connect_timer_interrupt_request ;

  // rule RL_rl_connect_software_interrupt_request
  assign CAN_FIRE_RL_rl_connect_software_interrupt_request =
	     timer0$RDY_get_sw_interrupt_req_get &&
	     brvf_core$RDY_cpu_software_interrupt_req ;
  assign WILL_FIRE_RL_rl_connect_software_interrupt_request =
	     CAN_FIRE_RL_rl_connect_software_interrupt_request ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_reset_start_2
  assign CAN_FIRE_RL_rl_reset_start_2 = MUX_rg_state$write_1__SEL_1 ;
  assign WILL_FIRE_RL_rl_reset_start_2 = MUX_rg_state$write_1__SEL_1 ;

  // inputs to muxes for submodule ports
  assign MUX_rg_state$write_1__SEL_1 =
	     mem0_controller$RDY_server_reset_request_put &&
	     timer0$RDY_server_reset_request_put &&
	     uart0$RDY_server_reset_request_put &&
	     brvf_core$RDY_cpu_reset_server_request_put &&
	     rg_state == 2'd0 ;
  assign MUX_rg_state$write_1__SEL_2 =
	     mem0_controller$RDY_set_addr_map &&
	     mem0_controller$RDY_server_reset_response_get &&
	     timer0$RDY_server_reset_response_get &&
	     uart0$RDY_server_reset_response_get &&
	     brvf_core$RDY_cpu_reset_server_response_get &&
	     rg_state == 2'd1 ;

  // register rg_state
  assign rg_state$D_IN = WILL_FIRE_RL_rl_reset_start_2 ? 2'd1 : 2'd2 ;
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset_start_2 || WILL_FIRE_RL_rl_reset_complete ;

  // submodule boot_rom
  assign boot_rom$set_addr_map_addr_base = soc_map$m_boot_rom_addr_base ;
  assign boot_rom$set_addr_map_addr_lim = soc_map$m_boot_rom_addr_lim ;
  assign boot_rom$slave_araddr = fabric$v_to_slaves_1_araddr ;
  assign boot_rom$slave_arprot = fabric$v_to_slaves_1_arprot ;
  assign boot_rom$slave_arvalid = fabric$v_to_slaves_1_arvalid ;
  assign boot_rom$slave_awaddr = fabric$v_to_slaves_1_awaddr ;
  assign boot_rom$slave_awprot = fabric$v_to_slaves_1_awprot ;
  assign boot_rom$slave_awvalid = fabric$v_to_slaves_1_awvalid ;
  assign boot_rom$slave_bready = fabric$v_to_slaves_1_bready ;
  assign boot_rom$slave_rready = fabric$v_to_slaves_1_rready ;
  assign boot_rom$slave_wdata = fabric$v_to_slaves_1_wdata ;
  assign boot_rom$slave_wstrb = fabric$v_to_slaves_1_wstrb ;
  assign boot_rom$slave_wvalid = fabric$v_to_slaves_1_wvalid ;
  assign boot_rom$EN_set_addr_map = MUX_rg_state$write_1__SEL_2 ;

  // submodule brvf_core
  assign brvf_core$cpu_dmem_master_arready = fabric$v_from_masters_2_arready ;
  assign brvf_core$cpu_dmem_master_awready = fabric$v_from_masters_2_awready ;
  assign brvf_core$cpu_dmem_master_bresp = fabric$v_from_masters_2_bresp ;
  assign brvf_core$cpu_dmem_master_bvalid = fabric$v_from_masters_2_bvalid ;
  assign brvf_core$cpu_dmem_master_rdata = fabric$v_from_masters_2_rdata ;
  assign brvf_core$cpu_dmem_master_rresp = fabric$v_from_masters_2_rresp ;
  assign brvf_core$cpu_dmem_master_rvalid = fabric$v_from_masters_2_rvalid ;
  assign brvf_core$cpu_dmem_master_wready = fabric$v_from_masters_2_wready ;
  assign brvf_core$cpu_external_interrupt_req_set_not_clear = 1'b0 ;
  assign brvf_core$cpu_imem_master_arready = fabric$v_from_masters_1_arready ;
  assign brvf_core$cpu_imem_master_awready = fabric$v_from_masters_1_awready ;
  assign brvf_core$cpu_imem_master_bresp = fabric$v_from_masters_1_bresp ;
  assign brvf_core$cpu_imem_master_bvalid = fabric$v_from_masters_1_bvalid ;
  assign brvf_core$cpu_imem_master_rdata = fabric$v_from_masters_1_rdata ;
  assign brvf_core$cpu_imem_master_rresp = fabric$v_from_masters_1_rresp ;
  assign brvf_core$cpu_imem_master_rvalid = fabric$v_from_masters_1_rvalid ;
  assign brvf_core$cpu_imem_master_wready = fabric$v_from_masters_1_wready ;
  assign brvf_core$cpu_slave_araddr = fabric$v_to_slaves_0_araddr ;
  assign brvf_core$cpu_slave_arprot = fabric$v_to_slaves_0_arprot ;
  assign brvf_core$cpu_slave_arvalid = fabric$v_to_slaves_0_arvalid ;
  assign brvf_core$cpu_slave_awaddr = fabric$v_to_slaves_0_awaddr ;
  assign brvf_core$cpu_slave_awprot = fabric$v_to_slaves_0_awprot ;
  assign brvf_core$cpu_slave_awvalid = fabric$v_to_slaves_0_awvalid ;
  assign brvf_core$cpu_slave_bready = fabric$v_to_slaves_0_bready ;
  assign brvf_core$cpu_slave_rready = fabric$v_to_slaves_0_rready ;
  assign brvf_core$cpu_slave_wdata = fabric$v_to_slaves_0_wdata ;
  assign brvf_core$cpu_slave_wstrb = fabric$v_to_slaves_0_wstrb ;
  assign brvf_core$cpu_slave_wvalid = fabric$v_to_slaves_0_wvalid ;
  assign brvf_core$cpu_software_interrupt_req_set_not_clear =
	     timer0$get_sw_interrupt_req_get ;
  assign brvf_core$cpu_timer_interrupt_req_set_not_clear =
	     timer0$get_timer_interrupt_req_get ;
  assign brvf_core$EN_cpu_reset_server_request_put =
	     MUX_rg_state$write_1__SEL_1 ;
  assign brvf_core$EN_cpu_reset_server_response_get =
	     MUX_rg_state$write_1__SEL_2 ;
  assign brvf_core$EN_cpu_external_interrupt_req = 1'b0 ;
  assign brvf_core$EN_cpu_timer_interrupt_req =
	     CAN_FIRE_RL_rl_connect_timer_interrupt_request ;
  assign brvf_core$EN_cpu_software_interrupt_req =
	     CAN_FIRE_RL_rl_connect_software_interrupt_request ;

  // submodule fabric
  assign fabric$set_verbosity_verbosity = 4'h0 ;
  assign fabric$v_from_masters_0_araddr =
	     64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign fabric$v_from_masters_0_arprot = 3'b010 /* unspecified value */  ;
  assign fabric$v_from_masters_0_arvalid = 1'd0 ;
  assign fabric$v_from_masters_0_awaddr =
	     64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign fabric$v_from_masters_0_awprot = 3'b010 /* unspecified value */  ;
  assign fabric$v_from_masters_0_awvalid = 1'd0 ;
  assign fabric$v_from_masters_0_bready = 1'd0 ;
  assign fabric$v_from_masters_0_rready = 1'd0 ;
  assign fabric$v_from_masters_0_wdata =
	     64'hAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign fabric$v_from_masters_0_wstrb =
	     8'b10101010 /* unspecified value */  ;
  assign fabric$v_from_masters_0_wvalid = 1'd0 ;
  assign fabric$v_from_masters_1_araddr = brvf_core$cpu_imem_master_araddr ;
  assign fabric$v_from_masters_1_arprot = brvf_core$cpu_imem_master_arprot ;
  assign fabric$v_from_masters_1_arvalid = brvf_core$cpu_imem_master_arvalid ;
  assign fabric$v_from_masters_1_awaddr = brvf_core$cpu_imem_master_awaddr ;
  assign fabric$v_from_masters_1_awprot = brvf_core$cpu_imem_master_awprot ;
  assign fabric$v_from_masters_1_awvalid = brvf_core$cpu_imem_master_awvalid ;
  assign fabric$v_from_masters_1_bready = brvf_core$cpu_imem_master_bready ;
  assign fabric$v_from_masters_1_rready = brvf_core$cpu_imem_master_rready ;
  assign fabric$v_from_masters_1_wdata = brvf_core$cpu_imem_master_wdata ;
  assign fabric$v_from_masters_1_wstrb = brvf_core$cpu_imem_master_wstrb ;
  assign fabric$v_from_masters_1_wvalid = brvf_core$cpu_imem_master_wvalid ;
  assign fabric$v_from_masters_2_araddr = brvf_core$cpu_dmem_master_araddr ;
  assign fabric$v_from_masters_2_arprot = brvf_core$cpu_dmem_master_arprot ;
  assign fabric$v_from_masters_2_arvalid = brvf_core$cpu_dmem_master_arvalid ;
  assign fabric$v_from_masters_2_awaddr = brvf_core$cpu_dmem_master_awaddr ;
  assign fabric$v_from_masters_2_awprot = brvf_core$cpu_dmem_master_awprot ;
  assign fabric$v_from_masters_2_awvalid = brvf_core$cpu_dmem_master_awvalid ;
  assign fabric$v_from_masters_2_bready = brvf_core$cpu_dmem_master_bready ;
  assign fabric$v_from_masters_2_rready = brvf_core$cpu_dmem_master_rready ;
  assign fabric$v_from_masters_2_wdata = brvf_core$cpu_dmem_master_wdata ;
  assign fabric$v_from_masters_2_wstrb = brvf_core$cpu_dmem_master_wstrb ;
  assign fabric$v_from_masters_2_wvalid = brvf_core$cpu_dmem_master_wvalid ;
  assign fabric$v_to_slaves_0_arready = brvf_core$cpu_slave_arready ;
  assign fabric$v_to_slaves_0_awready = brvf_core$cpu_slave_awready ;
  assign fabric$v_to_slaves_0_bresp = brvf_core$cpu_slave_bresp ;
  assign fabric$v_to_slaves_0_bvalid = brvf_core$cpu_slave_bvalid ;
  assign fabric$v_to_slaves_0_rdata = brvf_core$cpu_slave_rdata ;
  assign fabric$v_to_slaves_0_rresp = brvf_core$cpu_slave_rresp ;
  assign fabric$v_to_slaves_0_rvalid = brvf_core$cpu_slave_rvalid ;
  assign fabric$v_to_slaves_0_wready = brvf_core$cpu_slave_wready ;
  assign fabric$v_to_slaves_1_arready = boot_rom$slave_arready ;
  assign fabric$v_to_slaves_1_awready = boot_rom$slave_awready ;
  assign fabric$v_to_slaves_1_bresp = boot_rom$slave_bresp ;
  assign fabric$v_to_slaves_1_bvalid = boot_rom$slave_bvalid ;
  assign fabric$v_to_slaves_1_rdata = boot_rom$slave_rdata ;
  assign fabric$v_to_slaves_1_rresp = boot_rom$slave_rresp ;
  assign fabric$v_to_slaves_1_rvalid = boot_rom$slave_rvalid ;
  assign fabric$v_to_slaves_1_wready = boot_rom$slave_wready ;
  assign fabric$v_to_slaves_2_arready = mem0_controller$slave_arready ;
  assign fabric$v_to_slaves_2_awready = mem0_controller$slave_awready ;
  assign fabric$v_to_slaves_2_bresp = mem0_controller$slave_bresp ;
  assign fabric$v_to_slaves_2_bvalid = mem0_controller$slave_bvalid ;
  assign fabric$v_to_slaves_2_rdata = mem0_controller$slave_rdata ;
  assign fabric$v_to_slaves_2_rresp = mem0_controller$slave_rresp ;
  assign fabric$v_to_slaves_2_rvalid = mem0_controller$slave_rvalid ;
  assign fabric$v_to_slaves_2_wready = mem0_controller$slave_wready ;
  assign fabric$v_to_slaves_3_arready = uart0$slave_arready ;
  assign fabric$v_to_slaves_3_awready = uart0$slave_awready ;
  assign fabric$v_to_slaves_3_bresp = uart0$slave_bresp ;
  assign fabric$v_to_slaves_3_bvalid = uart0$slave_bvalid ;
  assign fabric$v_to_slaves_3_rdata = uart0$slave_rdata ;
  assign fabric$v_to_slaves_3_rresp = uart0$slave_rresp ;
  assign fabric$v_to_slaves_3_rvalid = uart0$slave_rvalid ;
  assign fabric$v_to_slaves_3_wready = uart0$slave_wready ;
  assign fabric$v_to_slaves_4_arready = timer0$slave_arready ;
  assign fabric$v_to_slaves_4_awready = timer0$slave_awready ;
  assign fabric$v_to_slaves_4_bresp = timer0$slave_bresp ;
  assign fabric$v_to_slaves_4_bvalid = timer0$slave_bvalid ;
  assign fabric$v_to_slaves_4_rdata = timer0$slave_rdata ;
  assign fabric$v_to_slaves_4_rresp = timer0$slave_rresp ;
  assign fabric$v_to_slaves_4_rvalid = timer0$slave_rvalid ;
  assign fabric$v_to_slaves_4_wready = timer0$slave_wready ;
  assign fabric$EN_reset = MUX_rg_state$write_1__SEL_1 ;
  assign fabric$EN_set_verbosity = 1'b0 ;

  // submodule mem0_controller
  assign mem0_controller$set_addr_map_addr_base =
	     soc_map$m_mem0_controller_addr_base ;
  assign mem0_controller$set_addr_map_addr_lim =
	     soc_map$m_mem0_controller_addr_lim ;
  assign mem0_controller$slave_araddr = fabric$v_to_slaves_2_araddr ;
  assign mem0_controller$slave_arprot = fabric$v_to_slaves_2_arprot ;
  assign mem0_controller$slave_arvalid = fabric$v_to_slaves_2_arvalid ;
  assign mem0_controller$slave_awaddr = fabric$v_to_slaves_2_awaddr ;
  assign mem0_controller$slave_awprot = fabric$v_to_slaves_2_awprot ;
  assign mem0_controller$slave_awvalid = fabric$v_to_slaves_2_awvalid ;
  assign mem0_controller$slave_bready = fabric$v_to_slaves_2_bready ;
  assign mem0_controller$slave_rready = fabric$v_to_slaves_2_rready ;
  assign mem0_controller$slave_wdata = fabric$v_to_slaves_2_wdata ;
  assign mem0_controller$slave_wstrb = fabric$v_to_slaves_2_wstrb ;
  assign mem0_controller$slave_wvalid = fabric$v_to_slaves_2_wvalid ;
  assign mem0_controller$to_raw_mem_response_put = to_raw_mem_response_put ;
  assign mem0_controller$EN_server_reset_request_put =
	     MUX_rg_state$write_1__SEL_1 ;
  assign mem0_controller$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_2 ;
  assign mem0_controller$EN_set_addr_map = MUX_rg_state$write_1__SEL_2 ;
  assign mem0_controller$EN_to_raw_mem_request_get =
	     EN_to_raw_mem_request_get ;
  assign mem0_controller$EN_to_raw_mem_response_put =
	     EN_to_raw_mem_response_put ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;

  // submodule timer0
  assign timer0$set_addr_map_addr_base = soc_map$m_timer0_addr_base ;
  assign timer0$set_addr_map_addr_lim = soc_map$m_timer0_addr_lim ;
  assign timer0$slave_araddr = fabric$v_to_slaves_4_araddr ;
  assign timer0$slave_arprot = fabric$v_to_slaves_4_arprot ;
  assign timer0$slave_arvalid = fabric$v_to_slaves_4_arvalid ;
  assign timer0$slave_awaddr = fabric$v_to_slaves_4_awaddr ;
  assign timer0$slave_awprot = fabric$v_to_slaves_4_awprot ;
  assign timer0$slave_awvalid = fabric$v_to_slaves_4_awvalid ;
  assign timer0$slave_bready = fabric$v_to_slaves_4_bready ;
  assign timer0$slave_rready = fabric$v_to_slaves_4_rready ;
  assign timer0$slave_wdata = fabric$v_to_slaves_4_wdata ;
  assign timer0$slave_wstrb = fabric$v_to_slaves_4_wstrb ;
  assign timer0$slave_wvalid = fabric$v_to_slaves_4_wvalid ;
  assign timer0$EN_server_reset_request_put = MUX_rg_state$write_1__SEL_1 ;
  assign timer0$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_2 ;
  assign timer0$EN_set_addr_map = MUX_rg_state$write_1__SEL_2 ;
  assign timer0$EN_get_timer_interrupt_req_get =
	     CAN_FIRE_RL_rl_connect_timer_interrupt_request ;
  assign timer0$EN_get_sw_interrupt_req_get =
	     CAN_FIRE_RL_rl_connect_software_interrupt_request ;

  // submodule uart0
  assign uart0$put_from_console_put = put_from_console_put ;
  assign uart0$set_addr_map_addr_base = soc_map$m_uart0_addr_base ;
  assign uart0$set_addr_map_addr_lim = soc_map$m_uart0_addr_lim ;
  assign uart0$slave_araddr = fabric$v_to_slaves_3_araddr ;
  assign uart0$slave_arprot = fabric$v_to_slaves_3_arprot ;
  assign uart0$slave_arvalid = fabric$v_to_slaves_3_arvalid ;
  assign uart0$slave_awaddr = fabric$v_to_slaves_3_awaddr ;
  assign uart0$slave_awprot = fabric$v_to_slaves_3_awprot ;
  assign uart0$slave_awvalid = fabric$v_to_slaves_3_awvalid ;
  assign uart0$slave_bready = fabric$v_to_slaves_3_bready ;
  assign uart0$slave_rready = fabric$v_to_slaves_3_rready ;
  assign uart0$slave_wdata = fabric$v_to_slaves_3_wdata ;
  assign uart0$slave_wstrb = fabric$v_to_slaves_3_wstrb ;
  assign uart0$slave_wvalid = fabric$v_to_slaves_3_wvalid ;
  assign uart0$EN_server_reset_request_put = MUX_rg_state$write_1__SEL_1 ;
  assign uart0$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_2 ;
  assign uart0$EN_set_addr_map = MUX_rg_state$write_1__SEL_2 ;
  assign uart0$EN_get_to_console_get = EN_get_to_console_get ;
  assign uart0$EN_put_from_console_put = EN_put_from_console_put ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        rg_state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    rg_state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkSoC_Top

